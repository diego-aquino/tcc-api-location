{"version":3,"sources":["../src/config/environment.ts","../src/services/here/HereClient.ts","../src/utils/math.ts","../src/utils/distances.ts","../src/server/errors.ts","../src/server/server.ts","../src/config/constants.ts","../src/server/swagger.ts","../src/index.ts"],"names":["z","axios","ZodError","AxiosError","fastify","path","fastifyStatic","fastifySwagger","fastifySwaggerUI"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAM,iBAAA,GAAoBA,MAAE,MAAO,CAAA;AAAA,EACjC,QAAA,EAAUA,KAAE,CAAA,IAAA,CAAK,CAAC,aAAA,EAAe,QAAQ,YAAY,CAAC,CAAE,CAAA,OAAA,CAAQ,aAAa,CAAA;AAAA,EAC7E,IAAA,EAAMA,MAAE,MAAO,CAAA,MAAA,GAAS,GAAI,EAAA,CAAE,QAAS,EAAA,CAAE,QAAS,EAAA;AAAA,EAElD,kBAAoB,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,GAAI,EAAA;AAAA,EACnC,eAAiB,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,GAAI,EAAA;AAAA,EAChC,YAAA,EAAcA,MAAE,MAAO,EAAA;AACzB,CAAC,CAAA,CAAA;AAEM,IAAM,WAAc,GAAA,iBAAA,CAAkB,KAAM,CAAA,OAAA,CAAQ,GAAG,CAAA,CAAA;ACE9D,IAAM,aAAN,MAAiB;AAAA,EAMf,WAAc,GAAA;AACZ,IAAA,IAAA,CAAK,GAAM,GAAA;AAAA,MACT,OAAA,EAASC,uBAAM,MAAO,CAAA;AAAA,QACpB,SAAS,WAAY,CAAA,kBAAA;AAAA,QACrB,MAAQ,EAAA,EAAE,MAAQ,EAAA,WAAA,CAAY,YAAa,EAAA;AAAA,QAC3C,kBAAkB,CAAC,MAAA,KAAW,IAAI,eAAgB,CAAA,MAAM,EAAE,QAAS,EAAA;AAAA,OACpE,CAAA;AAAA,MAED,MAAA,EAAQA,uBAAM,MAAO,CAAA;AAAA,QACnB,SAAS,WAAY,CAAA,eAAA;AAAA,QACrB,MAAQ,EAAA,EAAE,MAAQ,EAAA,WAAA,CAAY,YAAa,EAAA;AAAA,QAC3C,kBAAkB,CAAC,MAAA,KAAW,IAAI,eAAgB,CAAA,MAAM,EAAE,QAAS,EAAA;AAAA,OACpE,CAAA;AAAA,KACH,CAAA;AAAA,GACF;AAAA,EAEM,aAAa,KAAiD,EAAA;AAAA,IAAA,OAAA,OAAA,CAAA,IAAA,EAAA,IAAA,EAAA,aAAA;AAClE,MAAM,MAAA,MAAA,GAAS,MAAM,IAAA,CAAK,OAAQ,CAAA;AAAA,QAChC,CAAG,EAAA,KAAA;AAAA,QACH,KAAA,EAAO,CAAC,MAAM,CAAA;AAAA,OACf,CAAA,CAAA;AAED,MAAO,OAAA,MAAA,CAAA;AAAA,KACT,CAAA,CAAA;AAAA,GAAA;AAAA,EAEc,QAAQ,MAAmE,EAAA;AAAA,IAAA,OAAA,OAAA,CAAA,IAAA,EAAA,IAAA,EAAA,aAAA;AACvF,MAAA,MAAM,WAAW,MAAM,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,IAAoC,UAAY,EAAA;AAAA,QACtF,MAAQ,EAAA,cAAA,CAAA;AAAA,UACN,IAAA,EAAM,CAAC,IAAI,CAAA;AAAA,UACX,KAAO,EAAA,IAAA;AAAA,SACJ,EAAA,MAAA,CAAA;AAAA,OAEN,CAAA,CAAA;AAED,MAAM,MAAA,KAAA,GAAQ,SAAS,IAAK,CAAA,KAAA,CAAM,IAAI,CAAC,IAAA,KAAU,iCAC5C,IAD4C,CAAA,EAAA;AAAA,QAE/C,EAAI,EAAA,IAAA,CAAK,aAAc,CAAA,IAAA,CAAK,EAAE,CAAA;AAAA,OAC9B,CAAA,CAAA,CAAA;AAEF,MAAO,OAAA,KAAA,CAAA;AAAA,KACT,CAAA,CAAA;AAAA,GAAA;AAAA,EAEM,WAAW,OAA2C,EAAA;AAAA,IAAA,OAAA,OAAA,CAAA,IAAA,EAAA,IAAA,EAAA,aAAA;AAC1D,MAAM,MAAA,SAAA,GAAY,IAAK,CAAA,aAAA,CAAc,OAAO,CAAA,CAAA;AAE5C,MAAA,MAAM,WAAW,MAAM,IAAA,CAAK,GAAI,CAAA,MAAA,CAAO,IAAmC,SAAW,EAAA;AAAA,QACnF,MAAQ,EAAA;AAAA,UACN,EAAI,EAAA,SAAA;AAAA,UACJ,IAAA,EAAM,CAAC,IAAI,CAAA;AAAA,SACb;AAAA,OACD,CAAA,CAAA;AAED,MAAA,MAAM,QAAQ,QAAS,CAAA,IAAA,CAAA;AACvB,MAAO,OAAA,KAAA,CAAA;AAAA,KACT,CAAA,CAAA;AAAA,GAAA;AAAA,EAEQ,cAAc,OAAiB,EAAA;AACrC,IAAA,OAAO,OAAO,IAAK,CAAA,OAAA,EAAS,OAAO,CAAA,CAAE,SAAS,QAAQ,CAAA,CAAA;AAAA,GACxD;AAAA,EAEQ,cAAc,cAAwB,EAAA;AAC5C,IAAA,OAAO,OAAO,IAAK,CAAA,cAAA,EAAgB,QAAQ,CAAA,CAAE,SAAS,OAAO,CAAA,CAAA;AAAA,GAC/D;AACF,CAAA,CAAA;AAEA,IAAO,kBAAQ,GAAA,UAAA,CAAA;;;ACpFR,SAAS,UAAU,OAAyB,EAAA;AACjD,EAAO,OAAA,OAAA,IAAW,KAAK,EAAK,GAAA,GAAA,CAAA,CAAA;AAC9B,CAAA;;;ACKA,IAAM,0BAA6B,GAAA,IAAA,CAAA;AAG5B,SAAS,8BAAA,CAA+B,OAAc,UAA2B,EAAA;AACtF,EAAM,MAAA,sBAAA,GAAyB,SAAU,CAAA,KAAA,CAAM,QAAQ,CAAA,CAAA;AACvD,EAAM,MAAA,uBAAA,GAA0B,SAAU,CAAA,KAAA,CAAM,SAAS,CAAA,CAAA;AAEzD,EAAM,MAAA,2BAAA,GAA8B,SAAU,CAAA,UAAA,CAAW,QAAQ,CAAA,CAAA;AACjE,EAAM,MAAA,4BAAA,GAA+B,SAAU,CAAA,UAAA,CAAW,SAAS,CAAA,CAAA;AAEnE,EAAA,MAAM,8BAA8B,2BAA8B,GAAA,sBAAA,CAAA;AAClE,EAAA,MAAM,+BAA+B,4BAA+B,GAAA,uBAAA,CAAA;AAEpE,EAAA,MAAM,yBACJ,IAAK,CAAA,GAAA,CAAI,8BAA8B,CAAC,CAAA,IAAK,IAC7C,IAAK,CAAA,GAAA,CAAI,sBAAsB,CAC7B,GAAA,IAAA,CAAK,IAAI,2BAA2B,CAAA,GACpC,KAAK,GAAI,CAAA,4BAAA,GAA+B,CAAC,CAAK,IAAA,CAAA,CAAA;AAElD,EAAA,MAAM,qBACJ,GAAA,CAAA,GAAI,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,IAAA,CAAK,sBAAsB,CAAA,EAAG,IAAK,CAAA,IAAA,CAAK,CAAI,GAAA,sBAAsB,CAAC,CAAA,CAAA;AAEzF,EAAA,MAAM,uBAAuB,0BAA6B,GAAA,qBAAA,CAAA;AAC1D,EAAO,OAAA,oBAAA,CAAA;AACT,CAAA;ACxBO,SAAS,iBAAA,CAAkB,KAAqB,EAAA,QAAA,EAA0B,KAAqB,EAAA;AAPtG,EAAA,IAAA,EAAA,CAAA;AAQE,EAAA,IAAI,iBAAiBC,YAAU,EAAA;AAC7B,IAAA,OAAO,KAAM,CAAA,MAAA,CAAO,GAAG,CAAA,CAAE,IAAK,CAAA;AAAA,MAC5B,OAAS,EAAA,kBAAA;AAAA,MACT,QAAQ,KAAM,CAAA,MAAA;AAAA,KAC4C,CAAA,CAAA;AAAA,GAC9D;AAEA,EAAA,IAAI,iBAAiBC,gBAAY,EAAA;AAC/B,IAAA,MAAM,cAAiB,GAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EAClB,KAAM,CAAA,MAAA,EADY,CAAA,EAAA;AAAA,MAErB,IAAA,EAAA,CAAM,EAAM,GAAA,KAAA,CAAA,QAAA,KAAN,IAAgB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA;AAAA,KACxB,CAAA,CAAA;AAEA,IAAA,cAAA,CAAO,IAAI,KAAM,CAAA;AAAA,MACf,OAAS,EAAA,eAAA;AAAA,MACT,KAAO,EAAA,cAAA;AAAA,KACR,CAAA,CAAA;AAAA,GACI,MAAA;AACL,IAAA,cAAA,CAAO,IAAI,KAAM,CAAA;AAAA,MACf,OAAS,EAAA,uBAAA;AAAA,MACT,KAAA;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAEA,EAAA,OAAO,KAAM,CAAA,MAAA,CAAO,GAAG,CAAA,CAAE,IAAK,CAAA;AAAA,IAC5B,OAAS,EAAA,uBAAA;AAAA,GACqD,CAAA,CAAA;AAClE,CAAA;;;ACxBA,IAAM,6BAAA,GAAgC,KAAK,EAAK,GAAA,EAAA,CAAA;AAChD,IAAM,4CAA+C,GAAA,EAAA,CAAA;AAErD,IAAM,mCAAsC,GAAA;AAAA,EAC1C,QAAA;AAAA,EACA,WAAW,6BAA6B,CAAA,CAAA;AAAA,EACxC,YAAY,6BAA6B,CAAA,CAAA;AAAA,EACzC,0BAA0B,4CAA4C,CAAA,CAAA;AACxE,CAAA,CAAE,KAAK,IAAI,CAAA,CAAA;AAEX,IAAM,GAAM,GAAA;AAAA,EACV,IAAA,EAAM,IAAI,kBAAW,EAAA;AACvB,CAAA,CAAA;AAEA,IAAM,SAASC,wBAAQ,CAAA;AAAA,EACrB,MAAQ,EAAA,IAAA;AAAA,EACR,qBAAA,EAAuB,YAAY,QAAa,KAAA,aAAA;AAClD,CAAC,CAAA,CAAA;AAED,IAAM,kBAAA,GAAqBJ,MAAE,MAAO,CAAA;AAAA,EAClC,KAAA,EAAOA,MAAE,MAAO,EAAA;AAClB,CAAC,CAAA,CAAA;AAED,MAAA,CAAO,GAAI,CAAA,SAAA,EAAW,CAAO,OAAA,EAAS,KAAU,KAAA,OAAA,CAAA,KAAA,CAAA,EAAA,IAAA,EAAA,aAAA;AAC9C,EAAM,MAAA,EAAE,KAAM,EAAA,GAAI,kBAAmB,CAAA,KAAA;AAAA,IACnC,OAAQ,CAAA,KAAA;AAAA,GACV,CAAA;AAEA,EAAA,MAAM,UAAa,GAAA,MAAM,GAAI,CAAA,IAAA,CAAK,aAAa,KAAK,CAAA,CAAA;AAEpD,EAAA,MAAM,MAAS,GAAA,UAAA,CAAW,GAAU,CAAA,CAAC,IAAU,MAAA;AAAA,IAC7C,IAAI,IAAK,CAAA,EAAA;AAAA,IACT,IAAA,EAAM,KAAK,OAAQ,CAAA,IAAA;AAAA,IACnB,KAAO,EAAA;AAAA,MACL,IAAA,EAAM,KAAK,OAAQ,CAAA,KAAA;AAAA,MACnB,IAAA,EAAM,KAAK,OAAQ,CAAA,SAAA;AAAA,KACrB;AAAA,IACA,OAAS,EAAA;AAAA,MACP,IAAA,EAAM,KAAK,OAAQ,CAAA,WAAA;AAAA,MACnB,IAAA,EAAM,KAAK,OAAQ,CAAA,WAAA;AAAA,KACrB;AAAA,GACA,CAAA,CAAA,CAAA;AAEF,EAAO,OAAA,KAAA,CACJ,OAAO,eAAiB,EAAA,mCAAmC,EAC3D,MAAO,CAAA,GAAG,CACV,CAAA,IAAA,CAAK,MAA+E,CAAA,CAAA;AACzF,CAAC,CAAA,CAAA,CAAA;AAED,IAAM,8BAAA,GAAiCA,MAAE,MAAO,CAAA;AAAA,EAC9C,YAAA,EAAcA,MAAE,MAAO,EAAA;AAAA,EACvB,iBAAA,EAAmBA,MAAE,MAAO,EAAA;AAC9B,CAAC,CAAA,CAAA;AAED,MAAA,CAAO,GAAI,CAAA,mBAAA,EAAqB,CAAO,OAAA,EAAS,KAAU,KAAA,OAAA,CAAA,KAAA,CAAA,EAAA,IAAA,EAAA,aAAA;AAjE1D,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAkEE,EAAA,MAAM,EAAE,YAAA,EAAc,iBAAkB,EAAA,GAAI,8BAA+B,CAAA,KAAA;AAAA,IACzE,OAAQ,CAAA,KAAA;AAAA,GACV,CAAA;AAEA,EAAA,MAAM,CAAC,sBAAwB,EAAA,2BAA2B,CAAI,GAAA,MAAM,QAAQ,UAAW,CAAA;AAAA,IACrF,GAAA,CAAI,IAAK,CAAA,UAAA,CAAW,YAAY,CAAA;AAAA,IAChC,GAAA,CAAI,IAAK,CAAA,UAAA,CAAW,iBAAiB,CAAA;AAAA,GACtC,CAAA,CAAA;AAED,EAAI,IAAA,sBAAA,CAAuB,WAAW,UAAY,EAAA;AAChD,IAAI,IAAA,sBAAA,CAAuB,kBAAkBG,gBAAc,IAAA,CAAA,CAAA,EAAA,GAAA,sBAAA,CAAuB,OAAO,QAA9B,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAwC,YAAW,GAAK,EAAA;AACjH,MAAA,OAAO,KAAM,CAAA,MAAA,CAAO,GAAG,CAAA,CAAE,IAAK,CAAA;AAAA,QAC5B,OAAS,EAAA,uBAAA;AAAA,OACsE,CAAA,CAAA;AAAA,KACnF;AACA,IAAA,MAAM,sBAAuB,CAAA,MAAA,CAAA;AAAA,GAC/B;AAEA,EAAI,IAAA,2BAAA,CAA4B,WAAW,UAAY,EAAA;AACrD,IACE,IAAA,2BAAA,CAA4B,kBAAkBA,gBAC9C,IAAA,CAAA,CAAA,EAAA,GAAA,2BAAA,CAA4B,OAAO,QAAnC,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAA6C,YAAW,GACxD,EAAA;AACA,MAAA,OAAO,KAAM,CAAA,MAAA,CAAO,GAAG,CAAA,CAAE,IAAK,CAAA;AAAA,QAC5B,OAAS,EAAA,4BAAA;AAAA,OACsE,CAAA,CAAA;AAAA,KACnF;AACA,IAAA,MAAM,2BAA4B,CAAA,MAAA,CAAA;AAAA,GACpC;AAEA,EAAA,MAAM,aAAa,sBAAuB,CAAA,KAAA,CAAA;AAC1C,EAAA,MAAM,iBAAiB,UAAW,CAAA,QAAA,CAAA;AAElC,EAAA,MAAM,kBAAkB,2BAA4B,CAAA,KAAA,CAAA;AACpD,EAAA,MAAM,sBAAsB,eAAgB,CAAA,QAAA,CAAA;AAE5C,EAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,IAAA,OAAO,KAAM,CAAA,MAAA,CAAO,GAAG,CAAA,CAAE,IAAK,CAAA;AAAA,MAC5B,OAAS,EAAA,mDAAA;AAAA,KACsE,CAAA,CAAA;AAAA,GACnF;AAEA,EAAA,IAAI,CAAC,mBAAqB,EAAA;AACxB,IAAA,OAAO,KAAM,CAAA,MAAA,CAAO,GAAG,CAAA,CAAE,IAAK,CAAA;AAAA,MAC5B,OAAS,EAAA,wDAAA;AAAA,KACsE,CAAA,CAAA;AAAA,GACnF;AAEA,EAAA,MAAM,oBAAuB,GAAA,8BAAA;AAAA,IAC3B,EAAE,QAAU,EAAA,cAAA,CAAe,GAAK,EAAA,SAAA,EAAW,eAAe,GAAI,EAAA;AAAA,IAC9D,EAAE,QAAU,EAAA,mBAAA,CAAoB,GAAK,EAAA,SAAA,EAAW,oBAAoB,GAAI,EAAA;AAAA,GAC1E,CAAA;AAEA,EAAO,OAAA,KAAA,CACJ,OAAO,eAAiB,EAAA,mCAAmC,EAC3D,MAAO,CAAA,GAAG,EACV,IAAK,CAAA;AAAA,IACJ,UAAY,EAAA,oBAAA;AAAA,GACmE,CAAA,CAAA;AACrF,CAAC,CAAA,CAAA,CAAA;AAED,MAAA,CAAO,gBAAgB,iBAAiB,CAAA,CAAA;AAExC,IAAO,cAAQ,GAAA,MAAA,CAAA;AC7HR,IAAM,cACX,GAAA,WAAA,CAAY,QAAa,KAAA,YAAA,GAAeE,qBAAK,CAAA,IAAA,CAAK,SAAW,EAAA,IAAI,CAAI,GAAAA,qBAAA,CAAK,IAAK,CAAA,SAAA,EAAW,MAAM,IAAI,CAAA,CAAA;;;ACItG,IAAM,sBAAyBA,GAAAA,qBAAAA,CAAK,IAAK,CAAA,cAAA,EAAgB,QAAQ,MAAM,CAAA,CAAA;AAEvE,SAAsB,iBAAoB,GAAA;AAAA,EAAA,OAAA,OAAA,CAAA,IAAA,EAAA,IAAA,EAAA,aAAA;AACxC,IAAM,MAAA,cAAA,CAAO,SAASC,8BAAe,EAAA;AAAA,MACnC,IAAM,EAAA,sBAAA;AAAA,MACN,MAAQ,EAAA,OAAA;AAAA,KACT,CAAA,CAAA;AAED,IAAM,MAAA,cAAA,CAAO,SAASC,+BAAgB,EAAA;AAAA,MACpC,IAAM,EAAA,QAAA;AAAA,MACN,aAAe,EAAA;AAAA,QACb,IAAMF,EAAAA,qBAAAA,CAAK,IAAK,CAAA,sBAAA,EAAwB,cAAc,CAAA;AAAA,QACtD,OAAS,EAAA,sBAAA;AAAA,OACX;AAAA,KACD,CAAA,CAAA;AAED,IAAM,MAAA,cAAA,CAAO,SAASG,iCAAkB,EAAA;AAAA,MACtC,WAAa,EAAA,GAAA;AAAA,MACb,QAAU,EAAA;AAAA,QACR,YAAc,EAAA,MAAA;AAAA,QACd,WAAa,EAAA,KAAA;AAAA,OACf;AAAA,MACA,SAAW,EAAA,IAAA;AAAA,KACZ,CAAA,CAAA;AAAA,GACH,CAAA,CAAA;AAAA,CAAA;;;AC7BA,IAAM,YAAA,GAAe,YAAY,IAAS,KAAA,KAAA,CAAA,CAAA;AAE1C,SAAe,WAAc,GAAA;AAAA,EAAA,OAAA,OAAA,CAAA,IAAA,EAAA,IAAA,EAAA,aAAA;AAC3B,IAAA,MAAM,iBAAkB,EAAA,CAAA;AAExB,IAAA,MAAM,eAAO,MAAO,CAAA;AAAA,MAClB,IAAM,EAAA,SAAA;AAAA,MACN,MAAM,WAAY,CAAA,IAAA;AAAA,KACnB,CAAA,CAAA;AAAA,GACH,CAAA,CAAA;AAAA,CAAA;AAEA,IAAI,CAAC,YAAc,EAAA;AACjB,EAAA,KAAK,WAAY,EAAA,CAAE,KAAM,CAAA,CAAC,KAAU,KAAA;AAClC,IAAO,cAAA,CAAA,GAAA,CAAI,MAAM,KAAK,CAAA,CAAA;AACtB,IAAA,OAAA,CAAQ,KAAK,CAAC,CAAA,CAAA;AAAA,GACf,CAAA,CAAA;AACH,CAAA;AAEA,SAAe,iBAAA,CAAkB,SAAkB,QAAoB,EAAA;AAAA,EAAA,OAAA,OAAA,CAAA,IAAA,EAAA,IAAA,EAAA,aAAA;AACrE,IAAA,MAAM,iBAAkB,EAAA,CAAA;AACxB,IAAA,MAAM,eAAO,KAAM,EAAA,CAAA;AAEnB,IAAA,cAAA,CAAO,MAAO,CAAA,IAAA,CAAK,SAAW,EAAA,OAAA,EAAS,QAAQ,CAAA,CAAA;AAAA,GACjD,CAAA,CAAA;AAAA,CAAA;AAEA,IAAO,WAAQ,GAAA","file":"index.js","sourcesContent":["import { z } from 'zod';\n\nconst environmentSchema = z.object({\n  NODE_ENV: z.enum(['development', 'test', 'production']).default('development'),\n  PORT: z.coerce.number().int().positive().optional(),\n\n  HERE_GEOCODING_URL: z.string().url(),\n  HERE_LOOKUP_URL: z.string().url(),\n  HERE_API_KEY: z.string(),\n});\n\nexport const environment = environmentSchema.parse(process.env);\n","import axios, { AxiosInstance } from 'axios';\n\nimport { environment } from '@/config/environment';\n\nimport {\n  HereGeocodeResultItem,\n  HereGeocodeSearchParams,\n  HereGeocodeSuccessResponseBody,\n  HereLookupPoint,\n  HereLookupSearchParams,\n  HereLookupSuccessResponseBody,\n} from './types';\n\nclass HereClient {\n  private api: {\n    geocode: AxiosInstance;\n    lookup: AxiosInstance;\n  };\n\n  constructor() {\n    this.api = {\n      geocode: axios.create({\n        baseURL: environment.HERE_GEOCODING_URL,\n        params: { apiKey: environment.HERE_API_KEY },\n        paramsSerializer: (params) => new URLSearchParams(params).toString(),\n      }),\n\n      lookup: axios.create({\n        baseURL: environment.HERE_LOOKUP_URL,\n        params: { apiKey: environment.HERE_API_KEY },\n        paramsSerializer: (params) => new URLSearchParams(params).toString(),\n      }),\n    };\n  }\n\n  async searchCities(query: string): Promise<HereGeocodeResultItem[]> {\n    const cities = await this.geocode({\n      q: query,\n      types: ['city'],\n    });\n\n    return cities;\n  }\n\n  private async geocode(params: HereGeocodeSearchParams): Promise<HereGeocodeResultItem[]> {\n    const response = await this.api.geocode.get<HereGeocodeSuccessResponseBody>('/geocode', {\n      params: {\n        lang: ['pt'],\n        limit: '10',\n        ...params,\n      } satisfies HereGeocodeSearchParams,\n    });\n\n    const items = response.data.items.map((item) => ({\n      ...item,\n      id: this.encodePointId(item.id),\n    }));\n\n    return items;\n  }\n\n  async lookupById(pointId: string): Promise<HereLookupPoint> {\n    const decodedId = this.decodePointId(pointId);\n\n    const response = await this.api.lookup.get<HereLookupSuccessResponseBody>('/lookup', {\n      params: {\n        id: decodedId,\n        lang: ['pt'],\n      } satisfies HereLookupSearchParams,\n    });\n\n    const point = response.data;\n    return point;\n  }\n\n  private encodePointId(pointId: string) {\n    return Buffer.from(pointId, 'utf-8').toString('base64');\n  }\n\n  private decodePointId(encodedPointId: string) {\n    return Buffer.from(encodedPointId, 'base64').toString('utf-8');\n  }\n}\n\nexport default HereClient;\n","export function toRadians(degrees: number): number {\n  return degrees * (Math.PI / 180);\n}\n","import { toRadians } from './math';\n\ninterface Point {\n  latitude: number;\n  longitude: number;\n}\n\nconst EARTH_RADIUS_IN_KILOMETERS = 6371;\n\n// This uses the Haversine formula. See https://en.wikipedia.org/wiki/Haversine_formula.\nexport function calculateDistanceByCoordinates(point: Point, otherPoint: Point): number {\n  const pointLatitudeInRadians = toRadians(point.latitude);\n  const pointLongitudeInRadians = toRadians(point.longitude);\n\n  const otherPointLatitudeInRadians = toRadians(otherPoint.latitude);\n  const otherPointLongitudeInRadians = toRadians(otherPoint.longitude);\n\n  const latitudeDifferenceInRadians = otherPointLatitudeInRadians - pointLatitudeInRadians;\n  const longitudeDifferenceInRadians = otherPointLongitudeInRadians - pointLongitudeInRadians;\n\n  const squaredHalfChordLength =\n    Math.sin(latitudeDifferenceInRadians / 2) ** 2 +\n    Math.cos(pointLatitudeInRadians) *\n      Math.cos(otherPointLatitudeInRadians) *\n      Math.sin(longitudeDifferenceInRadians / 2) ** 2;\n\n  const centralAngleInRadians =\n    2 * Math.atan2(Math.sqrt(squaredHalfChordLength), Math.sqrt(1 - squaredHalfChordLength));\n\n  const distanceInKilometers = EARTH_RADIUS_IN_KILOMETERS * centralAngleInRadians;\n  return distanceInKilometers;\n}\n","import { AxiosError } from 'axios';\nimport { FastifyError, FastifyRequest, FastifyReply } from 'fastify';\nimport { ZodError } from 'zod';\n\nimport server from '@/server/server';\nimport { LocationComponents } from '@/types/generated';\n\nexport function handleServerError(error: FastifyError, _request: FastifyRequest, reply: FastifyReply) {\n  if (error instanceof ZodError) {\n    return reply.status(400).send({\n      message: 'Validation error',\n      issues: error.issues,\n    } satisfies LocationComponents['schemas']['ValidationError']);\n  }\n\n  if (error instanceof AxiosError) {\n    const formattedError = {\n      ...error.toJSON(),\n      data: error.response?.data as unknown,\n    };\n\n    server.log.error({\n      message: 'Request error',\n      error: formattedError,\n    });\n  } else {\n    server.log.error({\n      message: 'Internal server error',\n      error,\n    });\n  }\n\n  return reply.status(500).send({\n    message: 'Internal server error',\n  } satisfies LocationComponents['schemas']['InternalServerError']);\n}\n","import { AxiosError } from 'axios';\nimport fastify from 'fastify';\nimport { z } from 'zod';\n\nimport { environment } from '../config/environment';\nimport HereClient from '../services/here/HereClient';\nimport { LocationOperations } from '../types/generated';\nimport { City } from '../types/locations';\nimport { calculateDistanceByCoordinates } from '../utils/distances';\nimport { handleServerError } from './errors';\n\nconst DEFAULT_CACHE_CONTROL_MAX_AGE = 60 * 60 * 24; // 1 day\nconst DEFAULT_CACHE_CONTROL_STALE_WHILE_REVALIDATE = 60; // 1 minute\n\nconst DEFAULT_PUBLIC_CACHE_CONTROL_HEADER = [\n  'public',\n  `max-age=${DEFAULT_CACHE_CONTROL_MAX_AGE}`,\n  `s-maxage=${DEFAULT_CACHE_CONTROL_MAX_AGE}`,\n  `stale-while-revalidate=${DEFAULT_CACHE_CONTROL_STALE_WHILE_REVALIDATE}`,\n].join(', ');\n\nconst api = {\n  here: new HereClient(),\n};\n\nconst server = fastify({\n  logger: true,\n  disableRequestLogging: environment.NODE_ENV !== 'development',\n});\n\nconst searchCitiesSchema = z.object({\n  query: z.string(),\n});\n\nserver.get('/cities', async (request, reply) => {\n  const { query } = searchCitiesSchema.parse(\n    request.query,\n  ) satisfies LocationOperations['cities/search']['request']['searchParams'];\n\n  const hereCities = await api.here.searchCities(query);\n\n  const cities = hereCities.map<City>((city) => ({\n    id: city.id,\n    name: city.address.city,\n    state: {\n      name: city.address.state,\n      code: city.address.stateCode,\n    },\n    country: {\n      name: city.address.countryName,\n      code: city.address.countryCode,\n    },\n  }));\n\n  return reply\n    .header('cache-control', DEFAULT_PUBLIC_CACHE_CONTROL_HEADER)\n    .status(200)\n    .send(cities satisfies LocationOperations['cities/search']['response']['200']['body']);\n});\n\nconst getDistanceBetweenCitiesSchema = z.object({\n  originCityId: z.string(),\n  destinationCityId: z.string(),\n});\n\nserver.get('/cities/distances', async (request, reply) => {\n  const { originCityId, destinationCityId } = getDistanceBetweenCitiesSchema.parse(\n    request.query,\n  ) satisfies LocationOperations['cities/distances/get']['request']['searchParams'];\n\n  const [originCityLookupResult, destinationCityLookupResult] = await Promise.allSettled([\n    api.here.lookupById(originCityId),\n    api.here.lookupById(destinationCityId),\n  ]);\n\n  if (originCityLookupResult.status === 'rejected') {\n    if (originCityLookupResult.reason instanceof AxiosError && originCityLookupResult.reason.response?.status === 404) {\n      return reply.status(404).send({\n        message: 'Origin city not found',\n      } satisfies LocationOperations['cities/distances/get']['response']['404']['body']);\n    }\n    throw originCityLookupResult.reason;\n  }\n\n  if (destinationCityLookupResult.status === 'rejected') {\n    if (\n      destinationCityLookupResult.reason instanceof AxiosError &&\n      destinationCityLookupResult.reason.response?.status === 404\n    ) {\n      return reply.status(404).send({\n        message: 'Destination city not found',\n      } satisfies LocationOperations['cities/distances/get']['response']['404']['body']);\n    }\n    throw destinationCityLookupResult.reason;\n  }\n\n  const originCity = originCityLookupResult.value;\n  const originPosition = originCity.position;\n\n  const destinationCity = destinationCityLookupResult.value;\n  const destinationPosition = destinationCity.position;\n\n  if (!originPosition) {\n    return reply.status(404).send({\n      message: 'Could not find the coordinates of the origin city',\n    } satisfies LocationOperations['cities/distances/get']['response']['404']['body']);\n  }\n\n  if (!destinationPosition) {\n    return reply.status(404).send({\n      message: 'Could not find the coordinates of the destination city',\n    } satisfies LocationOperations['cities/distances/get']['response']['404']['body']);\n  }\n\n  const distanceInKilometers = calculateDistanceByCoordinates(\n    { latitude: originPosition.lat, longitude: originPosition.lng },\n    { latitude: destinationPosition.lat, longitude: destinationPosition.lng },\n  );\n\n  return reply\n    .header('cache-control', DEFAULT_PUBLIC_CACHE_CONTROL_HEADER)\n    .status(200)\n    .send({\n      kilometers: distanceInKilometers,\n    } satisfies LocationOperations['cities/distances/get']['response']['200']['body']);\n});\n\nserver.setErrorHandler(handleServerError);\n\nexport default server;\n","import path from 'path';\n\nimport { environment } from './environment';\n\nexport const ROOT_DIRECTORY =\n  environment.NODE_ENV === 'production' ? path.join(__dirname, '..') : path.join(__dirname, '..', '..');\n","import fastifyStatic from '@fastify/static';\nimport fastifySwagger from '@fastify/swagger';\nimport fastifySwaggerUI from '@fastify/swagger-ui';\nimport path from 'path';\n\nimport { ROOT_DIRECTORY } from '@/config/constants';\n\nimport server from './server';\n\nconst OPENAPI_SPEC_DIRECTORY = path.join(ROOT_DIRECTORY, 'docs', 'spec');\n\nexport async function loadServerSwagger() {\n  await server.register(fastifyStatic, {\n    root: OPENAPI_SPEC_DIRECTORY,\n    prefix: '/spec',\n  });\n\n  await server.register(fastifySwagger, {\n    mode: 'static',\n    specification: {\n      path: path.join(OPENAPI_SPEC_DIRECTORY, 'openapi.yaml'),\n      baseDir: OPENAPI_SPEC_DIRECTORY,\n    },\n  });\n\n  await server.register(fastifySwaggerUI, {\n    routePrefix: '/',\n    uiConfig: {\n      docExpansion: 'full',\n      deepLinking: false,\n    },\n    staticCSP: true,\n  });\n}\n","import { environment } from './config/environment';\nimport server from './server/server';\nimport { loadServerSwagger } from './server/swagger';\n\nconst isServerless = environment.PORT === undefined;\n\nasync function startServer() {\n  await loadServerSwagger();\n\n  await server.listen({\n    host: '0.0.0.0',\n    port: environment.PORT,\n  });\n}\n\nif (!isServerless) {\n  void startServer().catch((error) => {\n    server.log.error(error);\n    process.exit(1);\n  });\n}\n\nasync function serverlessHandler(request: Request, response: Response) {\n  await loadServerSwagger();\n  await server.ready();\n\n  server.server.emit('request', request, response);\n}\n\nexport default serverlessHandler;\n"]}