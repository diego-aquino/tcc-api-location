// Auto-generated by zimic.
// NOTE: Do not manually edit this file. Changes will be overridden.

import type { HttpHeadersSerialized, HttpSchema, HttpSearchParamsSerialized } from 'zimic/http';

export type HereSearchSchema = HttpSchema.Paths<{
  '/geocode': {
    /**
     * Geocode
     * @description This endpoint allows to find the geo-coordinates of a known address, place, locality or administrative area, even if the query is incomplete or partly incorrect. It also returns a complete postal address string and address details. It supports structured, unstructured and hybrid queries - combinations of structured and unstructured query elements.
     */
    GET: {
      request: {
        searchParams: HttpSearchParamsSerialized<{
          /** @description Specify the center of the search context expressed as coordinates.
           *
           *     Format: `{latitude},{longitude}`
           *
           *     Type: `{decimal},{decimal}`
           *
           *     Example: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)
           *      */
          at?: string;
          /** @description Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.
           *
           *     A geographic area can be
           *
           *      * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes
           *
           *        The country codes are to be provided in all uppercase.
           *
           *        Format: `countryCode:{countryCode}[,{countryCode}]*`
           *
           *        Examples:
           *         * `countryCode:USA`
           *         * `countryCode:CAN,MEX,USA`
           *
           *      */
          in?: string;
          /** @description Maximum number of results to be returned. */
          limit?: number;
          /** @description Enter a free-text query
           *
           *     Examples:
           *      * `125, Berliner, berlin`
           *      * `Beacon, Boston, Hospital`
           *      * `Schnurrbart German Pub and Restaurant, Hong Kong`
           *
           *     _Note: Either `q` or `qq`-parameter is required on this endpoint. Both parameters can be provided in the same request._
           *      */
          q?: string;
          /** @description Enter a qualified query. A qualified query is similar to a free-text query, but in a structured manner.
           *      It can take multiple _sub-parameters_, separated by semicolon, allowing to specify different aspects of a query.
           *
           *     Currently supported _sub-parameters_ are `country`, `state`, `county`, `city`, `district`, `street`,
           *      `houseNumber`, and `postalCode`.
           *
           *     Format: `{sub-parameter}={string}[;{sub-parameter}={string}]*`
           *
           *     Examples:
           *      * `city=Berlin;country=Germany;street=Friedrichstr;houseNumber=20`
           *      * `city=Berlin;country=Germany`
           *      * `postalCode=10969`
           *
           *     _Note: Either `q` or `qq`-parameter is required on this endpoint. Both parameters can be provided in the same request._
           *      */
          qq?: string;
          /** @description A comma-separated list of the types that should be included in the response.
           *
           *     If this parameter is not set, all types are considered for the response.
           *
           *     Description of supported values:
           *
           *     - `address`: restricting results to result types `houseNumber`, `street`, `postalCodePoint`, `intersection`, or `addressBlock`
           *     - `area`: restricting results to result types `locality` or `administrativeArea` including all the sub-types
           *     - `city`: restricting results to result type `locality` and locality type `city`
           *     - `houseNumber`: restricting results to result type: `houseNumber`, including house number types `PA` (Point Address), `MPA` (Micro Point Address) and
           *     `interpolated`, including exact house number matches and house number fallbacks
           *     - `postalCode`: restricting results to postal codes: either result type `postalCodePoint` or result type `locality` with locality type `postalCode`.
           *
           *       Note that in Ireland and Singapore, where each address has unique postal code,
           *       `postalCodePoint` results are replaced by `houseNumber` results.
           *     - `street`: restricting results to result type `street` */
          types?: ('address' | 'area' | 'city' | 'houseNumber' | 'postalCode' | 'street')[];
          /** @description Activate certain features or consider specific kinds of results, that would not be active or provided by default.
           *
           *     Description of supported values:
           *
           *     - **RESTRICTED** `MPA`: Enables geocoding to Micro Point Address results. GS7 supports micro point addresses in the following countries: AUS, CAN, NZL, USA, PRI. */
          with?: 'MPA'[];
          /** @description Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes. */
          lang?: string[];
          /** @description Toggle the political view.
           *
           *     This parameter accepts a single ISO 3166-1 alpha-3 country code in all uppercase.
           *
           *     If a valid 3-letter country code is provided for which GS7 does not have a dedicated political view, it will fallback to the default view.
           *
           *     The following political views are currently supported:
           *
           *     - `ARG`: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands
           *     - `EGY`: Egypt's view on Bir Tawil
           *     - `IND`: India's view on Gilgit-Baltistan
           *     - `KEN`: Kenya's view on the Ilemi Triangle
           *     - `MAR`: Morocco's view on Western Sahara
           *     - `PAK`: Pakistan's view on Jammu and Kashmir and the Junagadh Area
           *     - `RUS`: Russia's view on Crimea
           *     - `SDN`: Sudan's view on the Halaib Triangle
           *     - `SRB`: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands
           *     - `SUR`: Suriname's view on the Courantyne Headwaters and Lawa Headwaters
           *     - `SYR`: Syria's view on the Golan Heights
           *     - `TUR`: Turkey's view on Cyprus and Northern Cyprus
           *     - `TZA`: Tanzania's view on Lake Malawi
           *     - `URY`: Uruguay's view on Rincon de Artigas
           *     - `VNM`: Vietnam's view on the Paracel Islands and Spratly Islands */
          politicalView?: string;
          /** @description Select additional fields to be rendered in the response.
           *     Please note that some of the fields involve additional webservice calls and can increase the overall response time.
           *
           *     The value is a comma-separated list of the sections to be enabled.
           *     For some sections there is a long and a short ID.
           *
           *     Description of supported values:
           *
           *     - `countryInfo`: For each result item renders additional block with the country info, such as [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) and [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code.
           *     - `parsing`
           *     - `postalCodeDetails`: For each result item of types 'postalCodePoint' renders block with additional information about this postal code, such as postal code type: ZIP or ZIP+4; ZIP classification code: PO BOX, Unique or military; record type code for ZIP+4 codes. This feature is currently available only in the countries which are using ZIP codes - USA, PRI, VIR, GUM, MNP and ASM.
           *     - `streetInfo`: For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.
           *     - `tz`: Renders result items with additional time zone information. */
          show?: ('countryInfo' | 'parsing' | 'postalCodeDetails' | 'streetInfo' | 'tz')[];
          /** @description Return the map references of the location objects
           *
           *     Description of supported values:
           *
           *     - `adminIds`: Return the ids for the admin hierarchy of the response, to enable cross referencing into other services or data applications based on HERE Map Content
           *     - `cmVersion`: Return the core map version number of the region where the result is located
           *     - `links`: Return the link references from the result's access position,
           *     to enable cross referencing into other services or data applications
           *     - `pointAddress`: Return the reference of the point address,
           *     to enable cross referencing into other services or data applications
           *     based on HERE Map Content
           *     - `segments`: Return the street segment references from the result's access position,
           *     to enable cross referencing into other services or data applications
           *     based on HERE Map Content
           *
           *       **NOTE** The previous parameter `show=hmcReference` is deprecated and replaced
           *       by `showMapReferences=segments` which serves the same purpose.
           *      */
          showMapReferences?: ('adminIds' | 'cmVersion' | 'links' | 'pointAddress' | 'segments')[];
          /** @description Return requested additional attributes for segments in a road network if 'showNavAttributes' parameter is specified with valid value and relevant data is available.
           *
           *     The value is a comma-separated list of the sections to be enabled.
           *
           *     Description of supported values:
           *
           *     - `access`: Return the vehicle types allowed on a road or lane.
           *     - `functionalClass`: Return the functional class which is used to classify roads depending on the speed, importance and connectivity of the road.
           *     - `physical`: Return the values to describe special physical characteristics of a road. */
          showNavAttributes?: ('access' | 'functionalClass' | 'physical')[];
          /** @description allows enriching some types of response items with related items
           *
           *     Description of supported values:
           *
           *     - **RESTRICTED** `MPA`: For `type=houseNumber` and `houseNumberType=PA` result items, include a block containing a list of micro point addresses associated to this address, such as buildings, floors (levels) or suites (units). GS7 supports micro point addresses in the following countries: AUS, CAN, NZL, USA, PRI.
           *     - **RESTRICTED** `parentPA`: For `type=houseNumber` and `houseNumberType=MPA` result items, include a block containing the "parent" point addresses associated with this micro point address. GS7 supports micro point addresses in the following countries: AUS, CAN, NZL, USA, PRI. */
          showRelated?: ('MPA' | 'parentPA')[];
          /** @description **ALPHA** Shows translations and alternative names of the provided fields in all available languages.
           *
           *     This parameter accepts comma separated list of allowed fields for which translations are required.
           *
           *     Description of supported values:
           *
           *     - **ALPHA** `city`: shows alternative names and translations available for address field 'city'
           *     - **ALPHA** `county`: shows alternative names and translations available for address field 'county'
           *     - **ALPHA** `district`: shows alternative names and translations available for address field 'district'
           *     - **ALPHA** `state`: shows alternative names and translations available for address field 'state' */
          showTranslations?: ('city' | 'county' | 'district' | 'state')[];
        }>;
        headers: HttpHeadersSerialized<{
          /** @description Used to correlate requests with their responses within a customer's application, for logging and error reporting.
           *
           *     Format: Free string, but a valid UUIDv4 is recommended. */
          'X-Request-ID'?: string;
        }>;
      };
      response: {
        /** @description The search results. */
        200: {
          body: HereSearchComponents['schemas']['OpenSearchGeocodeResponse'];
        };
        /** @description Client error: request failed validation. */
        400: {
          body: HereSearchComponents['schemas']['ErrorResponse'];
        };
        /** @description Client error: http method not supported. */
        405: {
          body: HereSearchComponents['schemas']['ErrorResponse'];
        };
        /** @description Client error: Rate limit exceeded. */
        429: {
          body: HereSearchComponents['schemas']['ErrorResponse'];
        };
        /** @description Temporary server error. */
        503: {
          body: HereSearchComponents['schemas']['ErrorResponse'];
        };
      };
    };
  };
  '/lookup': {
    /**
     * Lookup By ID
     * @description This endpoint looks up a known place by the HERE ID included in the request.
     */
    GET: {
      request: {
        searchParams: HttpSearchParamsSerialized<{
          /** @description Location ID, which is the ID of a result item eg. of a Discover request */
          id: string;
          /** @description Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes. */
          lang?: string[];
          /** @description Toggle the political view.
           *
           *     This parameter accepts a single ISO 3166-1 alpha-3 country code in all uppercase.
           *
           *     If a valid 3-letter country code is provided for which GS7 does not have a dedicated political view, it will fallback to the default view.
           *
           *     The following political views are currently supported:
           *
           *     - `ARG`: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands
           *     - `EGY`: Egypt's view on Bir Tawil
           *     - `IND`: India's view on Gilgit-Baltistan
           *     - `KEN`: Kenya's view on the Ilemi Triangle
           *     - `MAR`: Morocco's view on Western Sahara
           *     - `PAK`: Pakistan's view on Jammu and Kashmir and the Junagadh Area
           *     - `RUS`: Russia's view on Crimea
           *     - `SDN`: Sudan's view on the Halaib Triangle
           *     - `SRB`: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands
           *     - `SUR`: Suriname's view on the Courantyne Headwaters and Lawa Headwaters
           *     - `SYR`: Syria's view on the Golan Heights
           *     - `TUR`: Turkey's view on Cyprus and Northern Cyprus
           *     - `TZA`: Tanzania's view on Lake Malawi
           *     - `URY`: Uruguay's view on Rincon de Artigas
           *     - `VNM`: Vietnam's view on the Paracel Islands and Spratly Islands */
          politicalView?: string;
          /** @description Select additional fields to be rendered in the response.
           *     Please note that some of the fields involve additional webservice calls and can increase the overall response time.
           *
           *     The value is a comma-separated list of the sections to be enabled.
           *     For some sections there is a long and a short ID.
           *
           *     Description of supported values:
           *
           *     - `countryInfo`: For each result item renders additional block with the country info, such as [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) and [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code.
           *     - `phonemes`: Renders phonemes for address and place names into the results.
           *     - `postalCodeDetails`: For each result item of types 'postalCodePoint' renders block with additional information about this postal code, such as postal code type: ZIP or ZIP+4; ZIP classification code: PO BOX, Unique or military; record type code for ZIP+4 codes. This feature is currently available only in the countries which are using ZIP codes - USA, PRI, VIR, GUM, MNP and ASM.
           *     - `streetInfo`: For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.
           *     - `tz`: Renders result items with additional time zone information.
           *     - **BETA, RESTRICTED** `eMobilityServiceProviders`: EV roaming enables EV drivers to be charged using subscription cards from e-Mobility Service Providers (eMSP).
           *      This option displays the list of eMSP partners associated with each EV station in the API results.
           *     - **BETA, RESTRICTED** `ev`: Returns aggregated EV connectors availability in 'extended.evStation' field and detailed connectors availability in 'extended.evAvailability' field.
           *     This option requires the use of a bearer token to authenticate. The use of an API key will lead to a status code 401.
           *     Please note that this may impact latency.
           *     - **BETA, RESTRICTED** `tripadvisor`: If available, adds images, ratings, and editorials from Tripadvisor (TM) in the 'media' field of `place` results. */
          show?: (
            | 'countryInfo'
            | 'eMobilityServiceProviders'
            | 'ev'
            | 'phonemes'
            | 'postalCodeDetails'
            | 'streetInfo'
            | 'tripadvisor'
            | 'tz'
          )[];
          /** @description Return the map references of the location objects
           *
           *     Description of supported values:
           *
           *     - `adminIds`: Return the ids for the admin hierarchy of the response, to enable cross referencing into other services or data applications based on HERE Map Content
           *     - `cmVersion`: Return the core map version number of the region where the result is located
           *     - `links`: Return the link references from the result's access position,
           *     to enable cross referencing into other services or data applications
           *     - `pointAddress`: Return the reference of the point address,
           *     to enable cross referencing into other services or data applications
           *     based on HERE Map Content
           *     - `segments`: Return the street segment references from the result's access position,
           *     to enable cross referencing into other services or data applications
           *     based on HERE Map Content
           *
           *       **NOTE** The previous parameter `show=hmcReference` is deprecated and replaced
           *       by `showMapReferences=segments` which serves the same purpose.
           *      */
          showMapReferences?: ('adminIds' | 'cmVersion' | 'links' | 'pointAddress' | 'segments')[];
          /** @description Return requested additional attributes for segments in a road network if 'showNavAttributes' parameter is specified with valid value and relevant data is available.
           *
           *     The value is a comma-separated list of the sections to be enabled.
           *
           *     Description of supported values:
           *
           *     - `access`: Return the vehicle types allowed on a road or lane.
           *     - `functionalClass`: Return the functional class which is used to classify roads depending on the speed, importance and connectivity of the road.
           *     - `physical`: Return the values to describe special physical characteristics of a road. */
          showNavAttributes?: ('access' | 'functionalClass' | 'physical')[];
          /** @description allows enriching some types of response items with related items
           *
           *     Description of supported values:
           *
           *     - **RESTRICTED** `MPA`: For `type=houseNumber` and `houseNumberType=PA` result items, include a block containing a list of micro point addresses associated to this address, such as buildings, floors (levels) or suites (units). GS7 supports micro point addresses in the following countries: AUS, CAN, NZL, USA, PRI.
           *     - **RESTRICTED** `parentPA`: For `type=houseNumber` and `houseNumberType=MPA` result items, include a block containing the "parent" point addresses associated with this micro point address. GS7 supports micro point addresses in the following countries: AUS, CAN, NZL, USA, PRI. */
          showRelated?: ('MPA' | 'parentPA')[];
        }>;
        headers: HttpHeadersSerialized<{
          /** @description Used to correlate requests with their responses within a customer's application, for logging and error reporting.
           *
           *     Format: Free string, but a valid UUIDv4 is recommended. */
          'X-Request-ID'?: string;
        }>;
      };
      response: {
        /** @description The search results. */
        200: {
          body: HereSearchComponents['schemas']['LookupResponse'];
        };
        /** @description Client error: request failed validation. */
        400: {
          body: HereSearchComponents['schemas']['ErrorResponse'];
        };
        /** @description Requested id could not be found. */
        404: {
          body: HereSearchComponents['schemas']['ErrorResponse'];
        };
        /** @description Client error: http method not supported. */
        405: {
          body: HereSearchComponents['schemas']['ErrorResponse'];
        };
        /** @description Client error: Rate limit exceeded. */
        429: {
          body: HereSearchComponents['schemas']['ErrorResponse'];
        };
        /** @description Temporary server error. */
        503: {
          body: HereSearchComponents['schemas']['ErrorResponse'];
        };
      };
    };
  };
}>;

export interface HereSearchComponents {
  schemas: {
    OpenSearchGeocodeResponse: {
      /** @description The results are presented as a JSON list of candidates in ranked order (most-likely to least-likely) based on the matched location criteria. */
      items: HereSearchComponents['schemas']['GeocodeResultItem'][];
    };
    GeocodeResultItem: {
      /** @description The localized display name of this result item. */
      title: string;
      /** @description The unique identifier for the result item. This ID can be used for a Look Up by ID search as well. */
      id: string;
      /** @description ISO3 country code of the item political view (default for international). This response element is populated when the politicalView parameter is set in the query */
      politicalView?: string;
      /** @enum {string} */
      resultType?:
        | 'addressBlock'
        | 'administrativeArea'
        | 'houseNumber'
        | 'intersection'
        | 'locality'
        | 'place'
        | 'postalCodePoint'
        | 'street';
      /**
       * @description
       *
       *     Description of supported values:
       *
       *     - `PA`: A Point Address represents an individual address as a point object. Point Addresses are coming from trusted sources. We can say with high certainty that the address exists and at what position. A Point Address result contains two types of coordinates. One is the access point (or navigation coordinates), which is the point to start or end a drive. The other point is the position or display point. This point varies per source and country. The point can be the rooftop point, a point close to the building entry, or a point close to the building, driveway or parking lot that belongs to the building.
       *     - `interpolated`: An interpolated address. These are approximate positions as a result of a linear interpolation based on address ranges. Address ranges, especially in the USA, are typical per block. For interpolated addresses, we cannot say with confidence that the address exists in reality. But the interpolation provides a good location approximation that brings people in most use cases close to the target location. The access point of an interpolated address result is calculated based on the address range and the road geometry. The position (display) point is pre-configured offset from the street geometry. Compared to Point Addresses, interpolated addresses are less accurate.
       *     - **ALPHA, RESTRICTED** `MPA`: A Micro Point Address represents a secondary address for a Point Address; for example, building, floor (level) and suite (unit). Micro Point Addresses can be used to enhance Point Address with greater address detail and higher coordinate accuracy. This result type is only returned by lookup endpoint or geocode endpoint when 'with=MPA' parameter is provided.
       * @enum {string}
       */
      houseNumberType?: 'MPA' | 'PA' | 'interpolated';
      /** @enum {string} */
      addressBlockType?: 'block' | 'subblock';
      /** @enum {string} */
      localityType?: 'city' | 'district' | 'postalCode' | 'subdistrict';
      /** @enum {string} */
      administrativeAreaType?: 'country' | 'county' | 'state';
      /** @description Postal address of the result item. */
      address: HereSearchComponents['schemas']['Address'];
      /** @description Additional information for 'postalCodePoint' results (only rendered if 'show=postalCodeDetails' is provided and only in the countries which are using ZIP codes - USA, PRI, VIR, GUM, MNP and ASM) */
      postalCodeDetails?: (
        | HereSearchComponents['schemas']['PostalCodeDetails_Usps_Zip']
        | HereSearchComponents['schemas']['PostalCodeDetails_Usps_ZipPlus4']
      )[];
      /** @description The coordinates (latitude, longitude) of a pin on a map corresponding to the searched place. */
      position?: HereSearchComponents['schemas']['DisplayResponseCoordinate'];
      /** @description Coordinates of the place you are navigating to (for example, driving or walking). This is a point on a road or in a parking lot. */
      access?: HereSearchComponents['schemas']['AccessResponseCoordinate'][];
      /**
       * Format: int64
       * @description The distance \"as the crow flies\" from the search center to this result item in meters. For example: \"172039\".
       *
       *     When searching along a route this is the distance along the route plus the distance from the route polyline to this result item.
       * @example 172039
       */
      distance?: number;
      /** @description The bounding box enclosing the geometric shape (area or line) that an individual result covers. `place` typed results have no `mapView`. */
      mapView?: HereSearchComponents['schemas']['MapView'];
      /** @description The list of categories assigned to this place. */
      categories?: HereSearchComponents['schemas']['Category'][];
      /** @description The list of food types assigned to this place. */
      foodTypes?: HereSearchComponents['schemas']['Category'][];
      /** @description If true, indicates that the requested house number was corrected to match the nearest known house number. This field is visible only when the value is true. */
      houseNumberFallback?: boolean;
      /** @description If true, indicates that the coordinates of 'position' and 'access' points of the Point Address are estimated.
       *     This field is visible only for result items with resultType 'houseNumber' and houseNumberType 'PA' and only when the value is 'true' */
      estimatedPointAddress?: boolean;
      /** @description Provides time zone information for this place. (rendered only if 'show=tz' is provided.) */
      timeZone?: HereSearchComponents['schemas']['TimeZoneInfo'];
      /** @description Indicates for each result how good the result matches to the original query. This can be used by the customer application to accept or reject the results depending on how "expensive" is the mistake for their use case */
      scoring?: HereSearchComponents['schemas']['Scoring'];
      /** @description Parsed terms and their positions in the input query (only rendered if 'show=parsing' is provided.) */
      parsing?: HereSearchComponents['schemas']['Parsing'];
      /** @description Street Details (only rendered if 'show=streetInfo' is provided.) */
      streetInfo?: HereSearchComponents['schemas']['StreetInfo'][];
      /** @description Country Details (only rendered if 'show=countryInfo' is provided.) */
      countryInfo?: HereSearchComponents['schemas']['CountryInfo'];
      /** @description **ALPHA** Features all name translations and alternative names for requested address fields. */
      translations?: HereSearchComponents['schemas']['TranslationsGeocode'];
      /** @description Return the map references of the location objects. */
      mapReferences?: HereSearchComponents['schemas']['MapReferenceSection'];
      /** @description List of related objects */
      related?: HereSearchComponents['schemas']['RelatedAddress'][];
      /** @description Return requested additional attributes for segments in a road network if 'showNavAttributes' parameter
       *     is specified with valid value and relevant data is available. The value is a comma-separated list
       *     of the sections to be enabled. */
      navigationAttributes?: HereSearchComponents['schemas']['NavigationAttributes'];
    };
    Address: {
      /** @description Assembled address value built out of the address components according to the regional postal rules. These are the same rules for all endpoints. It may not include all the input terms. For example: "Schulstraße 4, 32547 Bad Oeynhausen, Germany" */
      label?: string;
      /** @description A three-letter country code. For example: "DEU" */
      countryCode?: string;
      /** @description The localised country name. For example: "Deutschland" */
      countryName?: string;
      /** @description A state code or state name abbreviation – country specific. For example, in the United States it is the two letter state abbreviation: "CA" for California. */
      stateCode?: string;
      /** @description The state division of a country. For example: "North Rhine-Westphalia" */
      state?: string;
      /** @description A county code or county name abbreviation – country specific. For example, for Italy it is the province abbreviation: "RM" for Rome. */
      countyCode?: string;
      /** @description A division of a state; typically, a secondary-level administrative division of a country or equivalent. */
      county?: string;
      /** @description The name of the primary locality of the place. For example: "Bad Oyenhausen" */
      city?: string;
      /** @description A division of city; typically an administrative unit within a larger city or a customary name of a city's neighborhood. For example: "Bad Oyenhausen" */
      district?: string;
      /** @description A subdivision of a district. For example: "Minden-Lübbecke" */
      subdistrict?: string;
      /** @description Name of street. For example: "Schulstrasse" */
      street?: string;
      /** @description Names of streets in case of intersection result. For example: ["Friedrichstraße","Unter den Linden"] */
      streets?: string[];
      /** @description Name of block. */
      block?: string;
      /** @description Name of sub-block. */
      subblock?: string;
      /** @description An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code. For example: "32547" */
      postalCode?: string;
      /** @description House number. For example: "4" */
      houseNumber?: string;
      /** @description Name of building. */
      building?: string;
      /** @description Secondary unit information. It may include building, floor (level), and suite (unit) details. This field is returned by geocode and lookup endpoints only. */
      unit?: string;
    };
    PostalCodeDetails_Usps_Zip: {
      /** @description The postal code. */
      postalCode: string;
      /**
       * @description The postal entity. This could be a governmental authority, a regulatory authority, or a designated postal operator.
       *
       *     Description of supported values:
       *
       *     - `USPS`: The USPS postal code system.
       * @enum {string}
       */
      postalEntity?: 'USPS';
      /**
       * @description The postal code type. Currently supported values: 'ZIP' and 'ZIP+4'
       *
       *     Description of supported values:
       *
       *     - `ZIP`: A 5-digit code that identifies a specific geographic delivery area. ZIP codes can represent an area within a state, or a single building or company that has a very high mail volume.
       * @enum {string}
       */
      postalCodeType?: 'ZIP';
      /**
       * @description The ZIP Classification Code.
       *
       *     Description of supported values:
       *
       *     - `M`: Military ZIP code.
       *     - `P`: ZIP code having only Post Office boxes.
       *     - `U`: Unique ZIP code: A ZIP assigned to a company, agency, or entity with sufficient mail volume, based on average daily volume of letter-size pieces.
       * @enum {string}
       */
      zipClassificationCode?: 'M' | 'P' | 'U';
    };
    PostalCodeDetails_Usps_ZipPlus4: {
      /** @description The postal code. */
      postalCode: string;
      /**
       * @description The postal entity. This could be a governmental authority, a regulatory authority, or a designated postal operator.
       *
       *     Description of supported values:
       *
       *     - `USPS`: The USPS postal code system.
       * @enum {string}
       */
      postalEntity?: 'USPS';
      /**
       * @description The postal code type. Currently supported values: 'ZIP' and 'ZIP+4'
       *
       *     Description of supported values:
       *
       *     - `ZIP+4`: Nine-digit code that identifies a small geographic delivery area that is serviceable by a single carrier; appears in the last line of the address on a mail piece.
       * @enum {string}
       */
      postalCodeType?: 'ZIP+4';
      /**
       * @description The USPS ZIP+4 Record Type Code.
       *
       *     Description of supported values:
       *
       *     - `F`: Firm
       *     - `G`: General delivery
       *     - `H`: High-rise
       *     - `P`: PO Box
       *     - `R`: Rural route/contract
       *     - `S`: Street
       * @enum {string}
       */
      recordTypeCode?: 'F' | 'G' | 'H' | 'P' | 'R' | 'S';
    };
    DisplayResponseCoordinate: {
      /**
       * Format: double
       * @description Latitude of the address. For example: "52.19404"
       */
      lat: number;
      /**
       * Format: double
       * @description Longitude of the address. For example: "8.80135"
       */
      lng: number;
    };
    AccessResponseCoordinate: {
      /**
       * Format: double
       * @description Latitude of the address. For example: "52.19404"
       */
      lat: number;
      /**
       * Format: double
       * @description Longitude of the address. For example: "8.80135"
       */
      lng: number;
    };
    MapView: {
      /**
       * Format: double
       * @description Longitude of the western-side of the box. For example: "8.80068"
       */
      west: number;
      /**
       * Format: double
       * @description Latitude of the southern-side of the box. For example: "52.19333"
       */
      south: number;
      /**
       * Format: double
       * @description Longitude of the eastern-side of the box. For example: "8.8167"
       */
      east: number;
      /**
       * Format: double
       * @description Latitude of the northern-side of the box. For example: "52.19555"
       */
      north: number;
    };
    Category: {
      /** @description Identifier number for an associated category. For example: "900-9300-0000" */
      id: string;
      /** @description Name of the place category in the result item language. */
      name?: string;
      /** @description Whether or not it is a primary category. This field is visible only when the value is 'true'. */
      primary?: boolean;
    };
    TimeZoneInfo: {
      /** @description The name of the time zone as defined in the [tz database](https://en.wikipedia.org/wiki/Tz_database). For example: "Europe/Berlin" */
      name: string;
      /** @description The UTC offset for this time zone at request time. For example "+02:00" */
      utcOffset: string;
    };
    Scoring: {
      /**
       * Format: double
       * @description Indicates how good the input matches the returned address. It is equal to 1 if all input tokens are recognized and matched.
       */
      queryScore?: number;
      /** @description Indicates how good the individual result fields match to the corresponding part of the query. Is included only for the result fields that are actually matched to the query. */
      fieldScore?: HereSearchComponents['schemas']['FieldScore'];
    };
    FieldScore: {
      /**
       * Format: double
       * @description Indicates how good the result country name or [ISO 3166-1 alpha-3] country code matches to the freeform or qualified input.
       */
      country?: number;
      /**
       * Format: double
       * @description Indicates how good the result [ISO 3166-1 alpha-3] country code matches to the freeform or qualified input.
       */
      countryCode?: number;
      /**
       * Format: double
       * @description Indicates how good the result state name matches to the freeform or qualified input.
       */
      state?: number;
      /**
       * Format: double
       * @description Indicates how good the result state code matches to the freeform or qualified input.
       */
      stateCode?: number;
      /**
       * Format: double
       * @description Indicates how good the result county name matches to the freeform or qualified input.
       */
      county?: number;
      /**
       * Format: double
       * @description Indicates how good the result county code matches to the freeform or qualified input.
       */
      countyCode?: number;
      /**
       * Format: double
       * @description Indicates how good the result city name matches to the freeform or qualified input.
       */
      city?: number;
      /**
       * Format: double
       * @description Indicates how good the result district name matches to the freeform or qualified input.
       */
      district?: number;
      /**
       * Format: double
       * @description Indicates how good the result sub-district name matches to the freeform or qualified input.
       */
      subdistrict?: number;
      /** @description Indicates how good the result street names match to the freeform or qualified input. If the input contains multiple street names, the field score is calculated and returned for each of them individually. */
      streets?: number[];
      /**
       * Format: double
       * @description Indicates how good the result block name matches to the freeform or qualified input.
       */
      block?: number;
      /**
       * Format: double
       * @description Indicates how good the result sub-block name matches to the freeform or qualified input.
       */
      subblock?: number;
      /**
       * Format: double
       * @description Indicates how good the result house number matches to the freeform or qualified input. It may happen, that the house number, which one is looking for, is not yet in the map data. For such cases, the /geocode returns the nearest known house number on the same street. This represents the numeric difference between the requested and the returned house numbers.
       */
      houseNumber?: number;
      /**
       * Format: double
       * @description Indicates how good the result postal code matches to the freeform or qualified input.
       */
      postalCode?: number;
      /**
       * Format: double
       * @description Indicates how good the result building name matches to the freeform or qualified input.
       */
      building?: number;
      /**
       * Format: double
       * @description Indicates whether a secondary unit (such as building, floor or suite) has been recognized in the freeform or qualified input.
       */
      unit?: number;
      /**
       * Format: double
       * @description Indicates how good the result place name matches to the freeform or qualified input.
       */
      placeName?: number;
      /**
       * Format: double
       * @description Indicates how good the result ontology name matches to the freeform or qualified input.
       */
      ontologyName?: number;
    };
    Parsing: {
      /** @description Place name matches */
      placeName?: HereSearchComponents['schemas']['MatchInfo'][];
      /** @description Country matches */
      country?: HereSearchComponents['schemas']['MatchInfo'][];
      /** @description State matches */
      state?: HereSearchComponents['schemas']['MatchInfo'][];
      /** @description County matches */
      county?: HereSearchComponents['schemas']['MatchInfo'][];
      /** @description City matches */
      city?: HereSearchComponents['schemas']['MatchInfo'][];
      /** @description District matches */
      district?: HereSearchComponents['schemas']['MatchInfo'][];
      /** @description Subdistrict matches */
      subdistrict?: HereSearchComponents['schemas']['MatchInfo'][];
      /** @description Street matches */
      street?: HereSearchComponents['schemas']['MatchInfo'][];
      /** @description Block matches */
      block?: HereSearchComponents['schemas']['MatchInfo'][];
      /** @description Subblock matches */
      subblock?: HereSearchComponents['schemas']['MatchInfo'][];
      /** @description HouseNumber matches */
      houseNumber?: HereSearchComponents['schemas']['MatchInfo'][];
      /** @description PostalCode matches */
      postalCode?: HereSearchComponents['schemas']['MatchInfo'][];
      /** @description Building matches */
      building?: HereSearchComponents['schemas']['MatchInfo'][];
      /** @description secondaryUnits matches */
      secondaryUnits?: HereSearchComponents['schemas']['MatchInfo'][];
      /** @description Ontology name matches */
      ontologyName?: HereSearchComponents['schemas']['MatchInfo'][];
    };
    MatchInfo: {
      /**
       * Format: int32
       * @description First index of the matched range (0-based indexing, inclusive)
       */
      start: number;
      /**
       * Format: int32
       * @description One past the last index of the matched range (0-based indexing, exclusive); The difference between end and start gives the length of the term
       */
      end: number;
      /** @description Matched term in the input string */
      value: string;
      /**
       * @description The matched qualified query field type. If this is not returned, then matched value refers to the freetext query
       * @enum {string}
       */
      qq?: 'city' | 'country' | 'county' | 'district' | 'houseNumber' | 'postalCode' | 'state' | 'street';
    };
    StreetInfo: {
      /** @description Base name part of the street name. */
      baseName?: string;
      /** @description Street type part of the street name. */
      streetType?: string;
      /** @description Defines if the street type is before or after the base name. */
      streetTypePrecedes?: boolean;
      /** @description Defines if the street type is attached or unattached to the base name. */
      streetTypeAttached?: boolean;
      /** @description A prefix is a directional identifier that precedes, but is not included in, the base name of a road. */
      prefix?: string;
      /** @description A suffix is a directional identifier that follows, but is not included in, the base name of a road. */
      suffix?: string;
      /** @description Indicates the official directional identifiers assigned to highways, typically either "North/South" or "East/West" */
      direction?: string;
      /** @description BCP 47 compliant language code */
      language?: string;
    };
    CountryInfo: {
      /** @description [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code */
      alpha2?: string;
      /** @description [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code */
      alpha3?: string;
    };
    TranslationsGeocode: {
      /** @description The list of all state names and translations applicable to an address field, grouped by alternative views on it. For example, if subdivision of a country from administrative and postal views is different, some administrative levels may have two groups of names: from administrative and from postal views. */
      stateNames?: HereSearchComponents['schemas']['AdminNames'][];
      /** @description The list of all county names and translations applicable to an address field, grouped by alternative views on it. For example, if subdivision of a country from administrative and postal views is different, some administrative levels may have two groups of names: from administrative and from postal views. */
      countyNames?: HereSearchComponents['schemas']['AdminNames'][];
      /** @description The list of all city names and translations applicable to an address field, grouped by alternative views on it. For example, if subdivision of a country from administrative and postal views is different, some administrative levels may have two groups of names: from administrative and from postal views. */
      cityNames?: HereSearchComponents['schemas']['AdminNames'][];
      /** @description The list of all district names and translations applicable to an address field, grouped by alternative views on it. For example, if subdivision of a country from administrative and postal views is different, some administrative levels may have two groups of names: from administrative and from postal views. */
      districtNames?: HereSearchComponents['schemas']['AdminNames'][];
    };
    AdminNames: {
      /** @description The list of all values for a name. Those might be for different languages or different name types. */
      names: HereSearchComponents['schemas']['Name'][];
      /**
       * @description The preference of the view on an address field expressed by this group of names.
       *
       *     Description of supported values:
       *
       *     - `alternative`: Alternative view on this address field. Names of this group are exposed in the result only if matching to the query so that the end-user can better recognize the result.
       *     - `primary`: The default or only view on this address filed. These are the names which are exposed in the result by default.
       * @enum {string}
       */
      preference?: 'alternative' | 'primary';
    };
    Name: {
      /** @description The text value of this name. */
      value: string;
      /** @description The [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) language code. */
      language?: string;
      /**
       * @description The type of this name.
       *
       *     Description of supported values:
       *
       *     - `abbreviation`: Abbreviation is a shortened form of the official name.  For example, "CA" for "California". Abbreviation may also be an area code.
       *     - `areaCode`: Area code is a code representation of an admin. For example for countries this can be an ISO-3 or ISO-2 Code: "USA", "US" for "United States".
       *     - `baseName`: Base name represents the official name in one of the country official languages. For example, "Frankfurt am Main".
       *     - `exonym`: Exonym is a translation of the official name to a language that is not one of the country official languages. For example "Francfort-sur-le-Main" for "Frankfurt am Main".
       *     - `shortened`: A shortened variant of a long name where optional parts are omitted. For example, "Bad Soden" for "Bad Soden am Taunus".
       *     - `synonym`: A synonym is an additional commonly used name that is different than the official name, in the same language as the official name. For example, "Frankfurt" for "Frankfurt am Main".
       * @enum {string}
       */
      type: 'abbreviation' | 'areaCode' | 'baseName' | 'exonym' | 'shortened' | 'synonym';
      /** @description Flag indicating whether it is a primary name. This is the name which is exposed in the result by default. This field is visible only when the value is 'true'. */
      primary?: boolean;
      /** @description Flag indicating whether the name is transliterated. Additional transliterated form of the name is included for all non-Latin-1 names. This field is visible only when the value is 'true'. */
      transliterated?: boolean;
    };
    MapReferenceSection: {
      /** @description An identifier for link and the side of link the attribute is applicable to */
      links?: HereSearchComponents['schemas']['LinkInfoSection'][];
      /** @description The section containing the point address reference */
      pointAddress?: HereSearchComponents['schemas']['PointAddressSection'];
      /** @description The section containing the segment references */
      segments?: HereSearchComponents['schemas']['Segment'][];
      /** @description country id in HERE Map Content */
      country?: HereSearchComponents['schemas']['AdminIdSection'];
      /** @description state id in HERE Map Content */
      state?: HereSearchComponents['schemas']['AdminIdSection'];
      /** @description county id in HERE Map Content */
      county?: HereSearchComponents['schemas']['AdminIdSection'];
      /** @description city id in HERE Map Content */
      city?: HereSearchComponents['schemas']['AdminIdSection'];
      /** @description district id in HERE Map Content */
      district?: HereSearchComponents['schemas']['AdminIdSection'];
      /** @description subdistrict id in HERE Map Content */
      subdistrict?: HereSearchComponents['schemas']['AdminIdSection'];
      /** @description cmVerison info in HERE Map Content */
      cmVersion?: HereSearchComponents['schemas']['CmVersionSection'];
    };
    LinkInfoSection: {
      /** @description link ID in HERE core map */
      cmId: string;
      /** @description The side of the link the attribute is applicable to
       *
       *     - for `resultType=houseNumber` and `resultType=place`: side of the entity to the link
       *     - for `resultType=street`:
       *       - on endpoints *Geocode* and *Lookup*: side of the entity to the link, it is always "both"
       *       - on endpoints *Reverse Geocode* and *Multi-Reverse Geocode*: relative side from input to the link
       *      */
      side: string;
    };
    PointAddressSection: {
      /** @description The point address ID in HERE Map Content */
      hmcId: string;
    };
    Segment: {
      /** @description The segment reference follows the format `{segmentId}(#{offset})?`,
       *     representing its relative position from the result location to a segment. */
      ref?: string;
      /** @description The side of the link the attribute is applicable to
       *
       *     - for `resultType=houseNumber` and `resultType=place`: side of the entity to the link
       *     - for `resultType=street`:
       *       - on endpoints *Geocode* and *Lookup*: side of the entity to the link, it is always "both"
       *       - on endpoints *Reverse Geocode* and *Multi-Reverse Geocode*: relative side from input to the link
       *      */
      side?: string;
    };
    AdminIdSection: {
      /** @description Admin id in HERE Map Content */
      hmcId: string;
    };
    CmVersionSection: {
      /** @description Region id */
      region: string;
      /** @description Map version details (DVN) containing the base line for the map schema and an identifier for the weekly or quarterly update.
       *
       *     - Format: YYQ<weekly/quaterly update>
       *       - Example: 23150 (map schema: Q1/2023, weekly update 50)
       *      */
      dvn: string;
    };
    RelatedAddress: {
      /**
       * @description
       *
       *     Description of supported values:
       *
       *     - **RESTRICTED** `MPA`: Micro Point Addresses related to a result items with resultType='houseNumber' and houseNumberType='PA'; for example, buildings, floors (levels) or suites (units) associated to this address. This type of relationship is only returned by lookup endpoint or geocode endpoint when 'with=MPA' parameter is provided.
       *     - **RESTRICTED** `parentPA`: The Point Address to which the Micro Point Address belongs; for example the house number to which this suite is associated. This type of relationship is only returned by lookup endpoint or geocode endpoint when 'with=MPA' parameter is provided.
       *     - **BETA** `intersection`: The Intersections nearest to the address. This type of relationship is only returned by reverse geocode endpoint or multi-reverse geocode endpoint when 'showRelated=intersections' parameter is provided.
       * @enum {string}
       */
      relationship: 'MPA' | 'intersection' | 'parentPA';
      /** @description The localized display name of this related entity. */
      title?: string;
      /** @description The ID of the related entity. */
      id: string;
      /**
       * @description The resultType of the related entity.
       * @enum {string}
       */
      resultType?:
        | 'addressBlock'
        | 'administrativeArea'
        | 'houseNumber'
        | 'intersection'
        | 'locality'
        | 'place'
        | 'postalCodePoint'
        | 'street';
      /**
       * @description The houseNumberType of the related entity.
       *
       *     Description of supported values:
       *
       *     - `PA`: A Point Address represents an individual address as a point object. Point Addresses are coming from trusted sources. We can say with high certainty that the address exists and at what position. A Point Address result contains two types of coordinates. One is the access point (or navigation coordinates), which is the point to start or end a drive. The other point is the position or display point. This point varies per source and country. The point can be the rooftop point, a point close to the building entry, or a point close to the building, driveway or parking lot that belongs to the building.
       *     - `interpolated`: An interpolated address. These are approximate positions as a result of a linear interpolation based on address ranges. Address ranges, especially in the USA, are typical per block. For interpolated addresses, we cannot say with confidence that the address exists in reality. But the interpolation provides a good location approximation that brings people in most use cases close to the target location. The access point of an interpolated address result is calculated based on the address range and the road geometry. The position (display) point is pre-configured offset from the street geometry. Compared to Point Addresses, interpolated addresses are less accurate.
       *     - **ALPHA, RESTRICTED** `MPA`: A Micro Point Address represents a secondary address for a Point Address; for example, building, floor (level) and suite (unit). Micro Point Addresses can be used to enhance Point Address with greater address detail and higher coordinate accuracy. This result type is only returned by lookup endpoint or geocode endpoint when 'with=MPA' parameter is provided.
       * @enum {string}
       */
      houseNumberType?: 'MPA' | 'PA' | 'interpolated';
      /** @description The address of the related entity. The fields are only rendered, if they differ from the main result item. */
      address?: HereSearchComponents['schemas']['RelatedResultAddress'];
      /** @description The coordinates (latitude, longitude) of a pin on a map corresponding to the searched place. */
      position?: HereSearchComponents['schemas']['DisplayResponseCoordinate'];
      /** @description Coordinates of the place you are navigating to (for example, driving or walking). This is a point on a road or in a parking lot. */
      access?: HereSearchComponents['schemas']['AccessResponseCoordinate'][];
      /**
       * Format: int64
       * @description The distance "as the crow flies" from the search center to this related address' position in meters. It is only returned by reverse geocode endpoint or multi-reverse geocode endpoint when 'showRelated=intersections' parameter is provided.
       */
      distance?: number;
      /** @description The bounding box enclosing the geometric shape (area or line) that the related address covers. It is only returned by reverse geocode endpoint or multi-reverse geocode endpoint when 'showRelated=intersections' parameter is provided. */
      mapView?: HereSearchComponents['schemas']['MapView'];
    };
    RelatedResultAddress: {
      /** @description Assembled address value built out of the address components according to the regional postal rules. These are the same rules for all endpoints. It may not include all the input terms. */
      label?: string;
      /** @description A three-letter country code. For example: "DEU" */
      countryCode?: string;
      /** @description The localised country name. For example: "Deutschland" */
      countryName?: string;
      /** @description A state code or state name abbreviation – country specific. For example, in the United States it is the two letter state abbreviation: "CA" for California. */
      stateCode?: string;
      /** @description The state division of a country. For example: "North Rhine-Westphalia" */
      state?: string;
      /** @description A county code or county name abbreviation – country specific. For example, for Italy it is the province abbreviation: "RM" for Rome. */
      countyCode?: string;
      /** @description A division of a state; typically, a secondary-level administrative division of a country or equivalent. */
      county?: string;
      /** @description The name of the primary locality of the place. For example: "Bad Oyenhausen" */
      city?: string;
      /** @description A division of city; typically an administrative unit within a larger city or a customary name of a city's neighborhood. For example: "Bad Oyenhausen" */
      district?: string;
      /** @description A subdivision of a district. For example: "Minden-Lübbecke" */
      subdistrict?: string;
      /** @description Name of street. For example: "Schulstrasse" */
      street?: string;
      /** @description Names of streets in case of intersection result. For example: ["Friedrichstraße","Unter den Linden"] */
      streets?: string[];
      /** @description Name of block. */
      block?: string;
      /** @description Name of sub-block. */
      subblock?: string;
      /** @description An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code. For example: "32547" */
      postalCode?: string;
      /** @description House number. For example: "4" */
      houseNumber?: string;
      /** @description Name of building. */
      building?: string;
      /** @description defining a Micro Point Address. Combines unit name (suite, flat, etc.), level name (floor) and building unit name for a Micro Point Address */
      unit?: string;
    };
    NavigationAttributes: {
      /** @description The value represents one of the five levels: */
      functionalClass?: HereSearchComponents['schemas']['FunctionalClass'][];
      /** @description The following boolean values are available for access attributes: */
      access?: HereSearchComponents['schemas']['Access'][];
      /** @description The following boolean values are available for physical attributes: */
      physical?: HereSearchComponents['schemas']['Physical'][];
    };
    FunctionalClass: {
      /**
       * @description
       *
       *     Description of supported values:
       *
       *     - `1`: allowing for high volume, maximum speed traffic movement
       *     - `2`: allowing for high volume, high speed traffic movement
       *     - `3`: providing a high volume of traffic movement
       *     - `4`: providing for a high volume of traffic movement at moderate speeds between neighbourhoods
       *     - `5`: roads whose volume and traffic movement are below the level of any functional class
       * @enum {string}
       */
      value: '1' | '2' | '3' | '4' | '5';
    };
    Access: {
      /** @description Applicable to automobiles.
       *
       *     - `true`: The road allows automobiles.
       *     - `false`: The road doesn't allow automobiles.
       *      */
      automobiles?: boolean;
      /** @description Applicable to bicycles.
       *
       *     - `true`: The road allows bicycles.
       *     - `false`: The road doesn't allow bicycles.
       *      */
      bicycles?: boolean;
      /** @description Applicable to buses.
       *
       *     - `true`: The road allows buses.
       *     - `false`: The road doesn't allow buses.
       *      */
      buses?: boolean;
      /** @description Applicable to carpools.
       *
       *     - `true`: The road allows carpooling.
       *     - `false`: The road doesn't allow carpooling.
       *      */
      carpools?: boolean;
      /** @description Applicable to deliveries.
       *
       *     - `true`: The road allows deliveries.
       *     - `false`: The road doesn't allow deliveries.
       *      */
      deliveries?: boolean;
      /** @description Applicable to emergency vehicles.
       *
       *     - `true`: The road allows emergency vehicles.
       *     - `false`: The road doesn't allow emergency vehicles.
       *      */
      emergencyVehicles?: boolean;
      /** @description Applicable to motorcycles.
       *
       *     - `true`: The road allows motorcycles.
       *     - `false`: The road doesn't allow motorcycles.
       *      */
      motorcycles?: boolean;
      /** @description Applicable to pedestrians.
       *
       *     - `true`: The road allows pedestrians.
       *     - `false`: The road doesn't allow pedestrians.
       *      */
      pedestrians?: boolean;
      /** @description Applicable to taxis.
       *
       *     - `true`: The road allows taxis.
       *     - `false`: The road doesn't allow taxis.
       *      */
      taxis?: boolean;
      /** @description Applicable to through traffic.
       *
       *     - `true`: The road allows through traffic.
       *     - `false`: The road doesn't allow through traffic.
       *      */
      throughTraffic?: boolean;
      /** @description Applicable to trucks.
       *
       *     - `true`: The road allows trucks.
       *     - `false`: The road doesn't allow trucks.
       *      */
      trucks?: boolean;
    };
    Physical: {
      /** @description The segment represents a generalised route of a boat ferry for passengers or vehicles over water,
       *     including routes to pedestrian only islands, tourist areas, commuter ferry routes open to only pedestrians, etc.
       *
       *     - `true`: The road is a boat ferry.
       *     - `false`: The road isn't a boat ferry. */
      boatFerry?: boolean;
      /** @description Identifies a structure that allows a road, railway, or walkway to pass over another road,
       *     railway, waterway, or valley serving map display and route guidance functionalities.
       *
       *     - `true`: The road is a bridge.
       *     - `false`: The road isn't a bridge. */
      bridge?: boolean;
      /** @description Indication of a delivery road.
       *
       *     - `true`: The physical characteristic of the road is that it functions as a delivery road.
       *     - `false`: The physical characteristic of the road is that it doesn't function as a delivery road. */
      deliveryRoad?: boolean;
      /** @description Movable Bridge indicates a bridge that moves to allow passage (usually) for boats or barges.
       *
       *     - `true`: The road is a movable bridge.
       *     - `false`: The road isn't a movable bridge.
       *      */
      movableBridge?: boolean;
      /** @description Multiply Digitised identifies separately digitised roads, i.e., roads that are digitised with one line per
       *     direction of traffic instead of one line per road.
       *
       *     - `true`: The physical characteristic of the road is that it functions as multiplyDigitized.
       *     - `false`: The physical characteristic of the road is that it doesn't function as multiplyDigitized. */
      multiplyDigitized?: boolean;
      /** @description Indicates whether the navigable segment is paved.
       *
       *     - `true`: The physical characteristic of the road is paved.
       *     - `false`: The physical characteristic of the road isn't paved. */
      paved?: boolean;
      /** @description Private identifies roads that are not maintained by an organisation responsible for maintenance of
       *     public roads.
       *
       *     - `true`: The road is private..
       *     - `false`: The road isn't private. */
      private?: boolean;
      /** @description The segment represents a generalised route of a ferry for passengers or vehicles via rail.
       *
       *     - `true`: The road is a rail flerry.
       *     - `false`: The road isn't a rail flerry.
       *      */
      railFerry?: boolean;
      /** @description Identifies an enclosed (on all sides) passageway through or under an obstruction.
       *
       *     - `true`: The road is a tunnel.
       *     - `false`: The road isn't a tunnel.
       *      */
      tunnel?: boolean;
    };
    ErrorResponse: {
      /**
       * Format: int32
       * @description The HTTP status code
       */
      status: number;
      /** @description Human-readable error description */
      title: string;
      /** @description Error code */
      code?: string;
      /** @description Human-readable explanation for the error */
      cause?: string;
      /** @description Human-readable action for the user */
      action?: string;
      /** @description Auto-generated ID univocally identifying this request */
      correlationId: string;
      /** @description Request identifier provided by the user */
      requestId: string;
    };
    Chain: {
      /** @description Identifier number for an associated chain. For example: "272" */
      id: string;
    };
    SupplierReference: {
      /** @description Information about the supplier of this reference. */
      supplier: HereSearchComponents['schemas']['ReferenceSupplier'];
      /** @description Identifier of the place as provided by the supplier. */
      id: string;
    };
    ReferenceSupplier: {
      /**
       * @description An identifier for the supplier.
       * @enum {string}
       */
      id: 'booking.com' | 'core' | 'nsr' | 'parkopedia' | 'ryd' | 'tripadvisor' | 'venues' | 'vinfast' | 'yelp';
    };
    ContactInformation: {
      phone?: HereSearchComponents['schemas']['Contact'][];
      mobile?: HereSearchComponents['schemas']['Contact'][];
      tollFree?: HereSearchComponents['schemas']['Contact'][];
      fax?: HereSearchComponents['schemas']['Contact'][];
      www?: HereSearchComponents['schemas']['Contact'][];
      email?: HereSearchComponents['schemas']['Contact'][];
    };
    Contact: {
      /** @description Optional label for the contact string, such as "Customer Service" or "Pharmacy Fax". */
      label?: string;
      /** @description Contact information, as specified by the contact type. */
      value: string;
      /** @description The list of place categories this contact refers to. */
      categories?: HereSearchComponents['schemas']['CategoryRef'][];
    };
    CategoryRef: {
      /** @description Identifier number for an associated category. For example: "900-9300-0000" */
      id: string;
    };
    OpeningHours: {
      /** @description The list of place categories, this set of opening hours refers to. */
      categories?: HereSearchComponents['schemas']['CategoryRef'][];
      text: string[];
      isOpen?: boolean;
      /** @description List of iCalender-based structured representations of opening hours */
      structured: HereSearchComponents['schemas']['StructuredOpeningHours'][];
    };
    StructuredOpeningHours: {
      /** @description String with a modified [iCalendar DATE-TIME](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.5) value.
       *     The date part is omitted, values starts with the time section maker \"T\". Example: T132000 */
      start: string;
      /** @description String with an [iCalendar DURATION](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.6) value.
       *     A closed day has the value PT00:00M */
      duration: string;
      /** @description String with a [RECUR](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.10) rule. Note that, in contrast to the RFC, the assignment operator is a colon `:` and not an equal sign `=`. */
      recurrence: string;
    };
    ExtendedAttribute: {
      /** @description **BETA, RESTRICTED** EV charging pool information.
       *     This element and its children are only rendered when 'show=ev' is provided. */
      evStation?: HereSearchComponents['schemas']['EvChargingAttributes'];
      /** @description **BETA, RESTRICTED** EV charging pool detailed availability
       *     Detailed information about the pool stations, EVSE and connectors.
       *     This element and its children are only rendered when 'show=ev' is provided. */
      evAvailability?: HereSearchComponents['schemas']['EvAvailabilityAttributes'];
    };
    EvChargingAttributes: {
      /** @description **BETA, RESTRICTED** List of EV pool groups of connectors. Each group is defined by a common charging connector type and max power level. The numberOfConnectors field contains the number of connectors in the group. */
      connectors?: HereSearchComponents['schemas']['EvConnector'][];
      /**
       * Format: int32
       * @description **BETA, RESTRICTED** Total number of charging connectors in the EV charging pool
       */
      totalNumberOfConnectors?: number;
      /**
       * @description **BETA, RESTRICTED** Information about accessibility
       * @enum {string}
       */
      access?: 'private' | 'public' | 'restricted';
      /** @description **BETA, RESTRICTED** The list of eMSP (e-Mobility Service Provider) for which the EV station operator has EV roaming agreements.
       *     Each element contains both the name and the partner ID of the eMSP. */
      eMobilityServiceProviders?: HereSearchComponents['schemas']['EMobilityServiceProvider'][];
    };
    EvConnector: {
      /** @description **BETA, RESTRICTED** The EV charge point operator */
      supplierName?: string;
      /** @description **BETA, RESTRICTED** Id and name element pair representing the connector type in the EV pool group.
       *     For more information on the current connector types, see the [connectorTypes](https://www.here.com/docs/bundle/ev-charge-points-api-developer-guide/page/topics/resource-type-connector-types.html) values in the HERE EV Charge Points API. */
      connectorType?: HereSearchComponents['schemas']['EvNameId'];
      /** @description **BETA, RESTRICTED** Boolean indicating if a cable is provided for the connector group.If true, then there is a cable for the connector group at the station. */
      fixedCable?: boolean;
      /**
       * Format: double
       * @description **BETA, RESTRICTED** Maximum charge power (in kilowatt) of connectors in connectors group.
       */
      maxPowerLevel?: number;
      /** @description **BETA, RESTRICTED** Connectors group additional charging information */
      chargingPoint?: HereSearchComponents['schemas']['EvChargingPoint'];
    };
    EvNameId: {
      /** @description **BETA, RESTRICTED** Any string value */
      name?: string;
      /** @description **BETA, RESTRICTED** Unique ID */
      id?: string;
    };
    EvChargingPoint: {
      /**
       * Format: int32
       * @description **BETA, RESTRICTED** Number of physical connectors in the connectors group
       */
      numberOfConnectors?: number;
      /**
       * @description **BETA, RESTRICTED** Voltage provided by the connectors group
       * @example 100-120V AC
       */
      voltsRange?: string;
      /**
       * Format: int32
       * @description **BETA, RESTRICTED** Number of phases provided by the connectors group
       */
      phases?: number;
      /**
       * @description **BETA, RESTRICTED** Amperage provided by the connectors group
       * @example 12A-80A
       */
      ampsRange?: string;
      /**
       * Format: int32
       * @description **BETA, RESTRICTED** Number of available physical connectors in the connectors group (i.e not being used to charge a vehicle, out of service, etc)
       */
      numberOfAvailable?: number;
      /**
       * Format: int32
       * @description **BETA, RESTRICTED** Number of occupied physical connectors in the connectors group.
       */
      numberOfInUse?: number;
      /**
       * Format: int32
       * @description **BETA, RESTRICTED** Number of physical connectors that are out of service at the charge point.
       */
      numberOfOutOfService?: number;
      /**
       * Format: int32
       * @description **BETA, RESTRICTED** Number of physical connectors that are reserved at the charge point.
       */
      numberOfReserved?: number;
      /**
       * @description **BETA, RESTRICTED**
       *     Information about when the 'numberOfAvailable' and 'numberOfInUse' fields were last updated, in ISO 8601 format.
       *     If the time is UTC, a Z is added.
       *     If the time is not UTC , then the offset is added as a ±[hh][mm] value.
       *
       * @example 2013-12-31T12:00:00.000Z
       */
      lastUpdateTimestamp?: string;
    };
    EMobilityServiceProvider: {
      /** @description The name of the e-Mobility Service Provider. The eMSP name may change but the respective partner ID will remain stable. */
      name: string;
      /** @description The unique and stable ID for the e-Mobility Service Provider provided by HERE platform.
       *     The partner ID can be used to display EV stations supported by eMSP for which drivers have a subscription.
       *     The list of eMSP partner IDs can be retrieved using the EV Charge Points API
       *     [`roaming`](https://www.here.com/docs/bundle/ev-charge-points-api-developer-guide/page/topics/resource-roamings.html) resource. */
      partnerId: string;
    };
    EvAvailabilityAttributes: {
      /** @description **BETA, RESTRICTED** List of EV stations at the place (Currently only one is expected) */
      stations?: HereSearchComponents['schemas']['EvAvailabilityStation'][];
    };
    EvAvailabilityStation: {
      /** @description **BETA, RESTRICTED** HERE ID of the station */
      id?: string;
      /** @description **BETA, RESTRICTED** The unique ID of the location in the system of the CPO. */
      cpoId?: string;
      /** @description **BETA, RESTRICTED** List of EVSE (electric vehicle supply equipment) in the EV station */
      evses?: HereSearchComponents['schemas']['EvAvailabilityEvse'][];
    };
    EvAvailabilityEvse: {
      /** @description **BETA, RESTRICTED** HERE ID of the EVSE */
      id?: string;
      /** @description **BETA, RESTRICTED** The unique ID of an EVSE in the system of the CPO.
       *      This ID is unique in the system of the CPO but not necessarily globally unique.
       *      The format will differ between different CPOs. This ID is always provided. */
      cpoId?: string;
      /** @description **BETA, RESTRICTED** Identifier in Emi3 format of the EVSE within the Charge Point Operator (CPO) platform.
       *     This id is not always present. Example of ID format: "`DE*ICT*E0001897`".  */
      cpoEvseEMI3Id?: string;
      /**
       * @description **BETA, RESTRICTED** EVSE status
       *
       *     Description of supported values:
       *
       *     - **BETA, RESTRICTED** `AVAILABLE`: The EVSE is able to start a new charging session.
       *     - **BETA, RESTRICTED** `OCCUPIED`: The EVSE is in use
       *     - **BETA, RESTRICTED** `OFFLINE`: No status information available. (Also used when offline)
       *     - **BETA, RESTRICTED** `OTHER`: No status information available. (Also used when offline)
       *     - **BETA, RESTRICTED** `OUT_OF_SERVICE`: The EVSE is currently out of order.
       *     - **BETA, RESTRICTED** `RESERVED`: The EVSE has been reserved for a particular EV driver and is unavailable for other drivers
       *     - **BETA, RESTRICTED** `UNAVAILABLE`: The EVSE is not available because of a physical barrier, for example a car
       * @enum {string}
       */
      state?: 'AVAILABLE' | 'OCCUPIED' | 'OFFLINE' | 'OTHER' | 'OUT_OF_SERVICE' | 'RESERVED' | 'UNAVAILABLE';
      /** @description **BETA, RESTRICTED** Last update of the dynamic connector availability information reflected in the connectorStatus elements,
       *     in ISO 8601 format. If the time is UTC, a Z is added.
       *     An example of this kind of timestamp value is "`2013-12-31T12:00:00.000Z`". If the time is not UTC ,
       *     then the offset is added as a ±[hh][mm] value (for example, "`2014-01-14T10:00:00.000+0100`"). */
      last_updated?: string;
      /** @description **BETA, RESTRICTED** List of connectors of this EVSE. */
      connectors?: HereSearchComponents['schemas']['EvAvailabilityConnector'][];
    };
    EvAvailabilityConnector: {
      /** @description **BETA, RESTRICTED** HERE ID of the connector. */
      id?: string;
      /** @description **BETA, RESTRICTED** CPO ID of the connector. */
      cpoId?: string;
      /** @description **BETA, RESTRICTED** Connector type ID. For more information on the current connector types,
       *     see [resource-type-connector-types.html](https://www.here.com/docs/bundle/ev-charge-points-api-developer-guide/page/topics/resource-type-connector-types.html) */
      typeId?: string;
      /**
       * Format: double
       * @description **BETA, RESTRICTED** Maximum charge power of connector in kilowatts.
       */
      maxPowerLevel?: number;
    };
    PhonemesSection: {
      /** @description Phonemes for the name of the place. */
      placeName?: HereSearchComponents['schemas']['Phoneme'][];
      /** @description Phonemes for the county name. */
      countryName?: HereSearchComponents['schemas']['Phoneme'][];
      /** @description Phonemes for the state name. */
      state?: HereSearchComponents['schemas']['Phoneme'][];
      /** @description Phonemes for the county name. */
      county?: HereSearchComponents['schemas']['Phoneme'][];
      /** @description Phonemes for the city name. */
      city?: HereSearchComponents['schemas']['Phoneme'][];
      /** @description Phonemes for the district name. */
      district?: HereSearchComponents['schemas']['Phoneme'][];
      /** @description Phonemes for the subdistrict name. */
      subdistrict?: HereSearchComponents['schemas']['Phoneme'][];
      /** @description Phonemes for the street name. */
      street?: HereSearchComponents['schemas']['Phoneme'][];
      /** @description Phonemes for the block. */
      block?: HereSearchComponents['schemas']['Phoneme'][];
      /** @description Phonemes for the sub-block. */
      subblock?: HereSearchComponents['schemas']['Phoneme'][];
    };
    Phoneme: {
      /** @description The actual phonetic transcription in the NT-SAMPA format. */
      value: string;
      /** @description The [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) language code. */
      language?: string;
      /** @description Whether or not it is the preferred phoneme. */
      preferred?: boolean;
    };
    Media: {
      /** @description An object that provides access to images attached to the place result. */
      images?: HereSearchComponents['schemas']['ImageMediaCollection'];
      /** @description An object that provides editorial descriptions about a place result. */
      editorials?: HereSearchComponents['schemas']['EditorialMediaCollection'];
      /** @description An object that provides 3rd party supplier ratings about the place result. */
      ratings?: HereSearchComponents['schemas']['RatingMediaCollection'];
    };
    ImageMediaCollection: {
      /** @description An array containing the image objects of the current place result.
       *     If the place has no image, the parent element `images` is not present. */
      items: HereSearchComponents['schemas']['Image'][];
    };
    Image: {
      /** @description The URL to the actual image */
      href: string;
      /** @description The date the image was uploaded. */
      date?: string;
      /** @description Information about the supplier of this image. */
      supplier: HereSearchComponents['schemas']['MediaSupplier'];
    };
    MediaSupplier: {
      /**
       * @description An identifier for the supplier.
       * @enum {string}
       */
      id: 'tripadvisor';
    };
    EditorialMediaCollection: {
      /** @description An array containing the editorial objects of the current place result.
       *     If the place has no editorials, the parent element `editorials` is not present. */
      items: HereSearchComponents['schemas']['Editorial'][];
    };
    Editorial: {
      /** @description The editorial content. */
      description: string;
      /** @description A language code indicating what language the editorial is in, if known. */
      language: string;
      /** @description An optional deep link to a 3rd party source providing the editorials. */
      href?: string;
      /** @description Information about the supplier of this editorial. */
      supplier: HereSearchComponents['schemas']['MediaSupplier'];
    };
    RatingMediaCollection: {
      /** @description An array containing the ratings objects of the current place result.
       *     If the place has no ratings, the parent element `ratings` is not present. */
      items: HereSearchComponents['schemas']['Rating'][];
    };
    Rating: {
      /**
       * Format: int32
       * @description The count of user ratings in the supplier database.
       */
      count: number;
      /**
       * Format: double
       * @description The average user rating in the supplier database.
       */
      average: number;
      /** @description An optional deep link to a 3rd party source providing the ratings information. */
      href?: string;
      /** @description Information about the supplier of this rating. */
      supplier: HereSearchComponents['schemas']['MediaSupplier'];
    };
    AccessRestrictionAttributes: {
      /** @description The list of place categories, this set of access restrictions refers to. */
      categories?: HereSearchComponents['schemas']['CategoryRef'][];
      /** @description When set to `true`, the place response item has a known access restriction.
       *     When the place has no known access restriction, the `accessRestrictions` element is omitted, so `restricted` value is never set to `false`. */
      restricted?: boolean;
    };
    LookupResponse: {
      /** @description The localized display name of this result item. */
      title: string;
      /** @description The unique identifier for the result item. This ID can be used for a Look Up by ID search as well. */
      id: string;
      /**
       * @description **ALPHA**
       *     * `maybe`: The place has diminished confidence in the source data and is likely to be closed.
       *     * `yes`: The place is actually closed.
       *
       * @enum {string}
       */
      closedPermanently?: 'maybe' | 'yes';
      /** @description ISO3 country code of the item political view (default for international). This response element is populated when the politicalView parameter is set in the query */
      politicalView?: string;
      /** @enum {string} */
      resultType?:
        | 'addressBlock'
        | 'administrativeArea'
        | 'houseNumber'
        | 'intersection'
        | 'locality'
        | 'place'
        | 'postalCodePoint'
        | 'street';
      /**
       * @description
       *
       *     Description of supported values:
       *
       *     - `PA`: A Point Address represents an individual address as a point object. Point Addresses are coming from trusted sources. We can say with high certainty that the address exists and at what position. A Point Address result contains two types of coordinates. One is the access point (or navigation coordinates), which is the point to start or end a drive. The other point is the position or display point. This point varies per source and country. The point can be the rooftop point, a point close to the building entry, or a point close to the building, driveway or parking lot that belongs to the building.
       *     - `interpolated`: An interpolated address. These are approximate positions as a result of a linear interpolation based on address ranges. Address ranges, especially in the USA, are typical per block. For interpolated addresses, we cannot say with confidence that the address exists in reality. But the interpolation provides a good location approximation that brings people in most use cases close to the target location. The access point of an interpolated address result is calculated based on the address range and the road geometry. The position (display) point is pre-configured offset from the street geometry. Compared to Point Addresses, interpolated addresses are less accurate.
       *     - **ALPHA, RESTRICTED** `MPA`: A Micro Point Address represents a secondary address for a Point Address; for example, building, floor (level) and suite (unit). Micro Point Addresses can be used to enhance Point Address with greater address detail and higher coordinate accuracy. This result type is only returned by lookup endpoint or geocode endpoint when 'with=MPA' parameter is provided.
       * @enum {string}
       */
      houseNumberType?: 'MPA' | 'PA' | 'interpolated';
      /** @enum {string} */
      addressBlockType?: 'block' | 'subblock';
      /** @enum {string} */
      localityType?: 'city' | 'district' | 'postalCode' | 'subdistrict';
      /** @enum {string} */
      administrativeAreaType?: 'country' | 'county' | 'state';
      /** @description If true, indicates that the requested house number was corrected to match the nearest known house number. This field is visible only when the value is true. */
      houseNumberFallback?: boolean;
      /** @description If true, indicates that the coordinates of 'position' and 'access' points of the Point Address are estimated.
       *     This field is visible only for result items with resultType 'houseNumber' and houseNumberType 'PA' and only when the value is 'true' */
      estimatedPointAddress?: boolean;
      /** @description Postal address of the result item. */
      address: HereSearchComponents['schemas']['Address'];
      /** @description Additional information for 'postalCodePoint' results (only rendered if 'show=postalCodeDetails' is provided and only in the countries which are using ZIP codes - USA, PRI, VIR, GUM, MNP and ASM) */
      postalCodeDetails?: (
        | HereSearchComponents['schemas']['PostalCodeDetails_Usps_Zip']
        | HereSearchComponents['schemas']['PostalCodeDetails_Usps_ZipPlus4']
      )[];
      /** @description The coordinates (latitude, longitude) of a pin on a map corresponding to the searched place. */
      position?: HereSearchComponents['schemas']['DisplayResponseCoordinate'];
      /** @description Coordinates of the place you are navigating to (for example, driving or walking). This is a point on a road or in a parking lot. */
      access?: HereSearchComponents['schemas']['AccessResponseCoordinate'][];
      /** @description The bounding box enclosing the geometric shape (area or line) that an individual result covers. `place` typed results have no `mapView`. */
      mapView?: HereSearchComponents['schemas']['MapView'];
      /** @description The list of categories assigned to this place. */
      categories?: HereSearchComponents['schemas']['Category'][];
      /** @description The list of chains assigned to this place. */
      chains?: HereSearchComponents['schemas']['Chain'][];
      /** @description The list of supplier references available for this place. */
      references?: HereSearchComponents['schemas']['SupplierReference'][];
      /** @description The list of food types assigned to this place. */
      foodTypes?: HereSearchComponents['schemas']['Category'][];
      /** @description Contact information like phone, email, WWW. */
      contacts?: HereSearchComponents['schemas']['ContactInformation'][];
      /** @description A list of hours during which the place is open for business.
       *     This field is optional: When it is not present, it means that we are lacking data about the place opening hours.
       *     Days without opening hours have to be considered as closed. */
      openingHours?: HereSearchComponents['schemas']['OpeningHours'][];
      /** @description Provides time zone information for this place. (rendered only if 'show=tz' is provided.) */
      timeZone?: HereSearchComponents['schemas']['TimeZoneInfo'];
      /** @description **BETA, RESTRICTED** A set of rich media types aggregated from multiple sources. When the current place has no ratings, description or images, this element is not present. */
      media?: HereSearchComponents['schemas']['Media'];
      /** @description Extended attributes section to contain detailed information for specific result types. */
      extended?: HereSearchComponents['schemas']['ExtendedAttribute'];
      /** @description Phonemes for address and place names. (rendered only if 'show=phonemes' is provided.) */
      phonemes?: HereSearchComponents['schemas']['PhonemesSection'];
      /** @description Street Details (only rendered if 'show=streetInfo' is provided.) */
      streetInfo?: HereSearchComponents['schemas']['StreetInfo'][];
      /** @description Country Details (only rendered if 'show=countryInfo' is provided.) */
      countryInfo?: HereSearchComponents['schemas']['CountryInfo'];
      /** @description Return the map references of the location objects. */
      mapReferences?: HereSearchComponents['schemas']['MapReferenceSection'];
      /** @description List of related objects */
      related?: HereSearchComponents['schemas']['RelatedAddress'][];
      /** @description Return requested additional attributes for segments in a road network if 'showNavAttributes' parameter
       *     is specified with valid value and relevant data is available. The value is a comma-separated list
       *     of the sections to be enabled. */
      navigationAttributes?: HereSearchComponents['schemas']['NavigationAttributes'];
      /**
       * @description A list of access restrictions related to a `place` result item.
       *
       *     A place response item has a restricted access when the place is not publicly accessible without a specific authorization, membership or customer relationship.
       *     Examples: the place is for customers or visitors only.
       *
       *     This field is optional: When it is not present, it means that the place response item has no known access restriction.
       * @example [
       *       {
       *         "categories": [
       *           {
       *             "id": "800-8500-0177"
       *           }
       *         ],
       *         "restricted": true
       *       }
       *     ]
       */
      accessRestrictions?: HereSearchComponents['schemas']['AccessRestrictionAttributes'][];
    };
  };
}
